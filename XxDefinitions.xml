<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XxDefinitions</name>
    </assembly>
    <members>
        <member name="T:XxDefinitions.AbleString">
            <summary>
            对应value的 已启用|已禁用
            </summary>
        </member>
        <member name="T:XxDefinitions.OnOffString">
            <summary>
            对应value的 开|关
            </summary>
        </member>
        <member name="T:XxDefinitions.Behavior.IBehavior">
            <summary>
            行为，用于自动机
            </summary>
        </member>
        <member name="P:XxDefinitions.Behavior.IBehavior.Active">
            <summary>
            是否正在暂停，初始值应为true暂停
            在CanPause()时Pausing必须能在Pause()后set为true，Continue同理
            不要在set_Active中套用TryPause等
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.IBehavior.Update">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.IBehavior.CanPause">
            <summary>
            它是否能暂停,true会
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.IBehavior.Pause">
            <summary>
            进行暂停时
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.IBehavior.CanActivate">
            <summary>
            它能否激活,true会
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.IBehavior.Activate">
            <summary>
            进行激活时
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.IBehavior.Initialize">
            <summary>
            开始(注册)时
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.IBehavior.Dispose">
            <summary>
            终止时
            因为某些原因，不保证执行
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.IBehavior.NetUpdateSend(System.IO.BinaryWriter)">
            <summary>
            用于联机同步发送，如果需要完整同步(Server存在需要同步世界的客户端)会全部使用，否则在NetUpdate时使用
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:XxDefinitions.Behavior.IBehavior.NetUpdateReceive(System.IO.BinaryReader)">
            <summary>
            用于联机同步接收，如果需要完整同步(Server存在需要同步世界的客户端)会全部使用，否则在NetUpdate时使用
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:XxDefinitions.Behavior.IBehavior.Call(System.Object[])">
            <summary>
            用于通用的数据传输
            </summary>
        </member>
        <member name="P:XxDefinitions.Behavior.IBehavior.BehaviorName">
            <summary>
            行为的名称
            </summary>
        </member>
        <member name="P:XxDefinitions.Behavior.IBehavior.NetUpdate">
            <summary>
            是否进行同步
            </summary>
        </member>
        <member name="T:XxDefinitions.Behavior.Behavior">
            <summary>
            行为的基类
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorUtils.TryPause(XxDefinitions.Behavior.IBehavior)">
            <summary>
            尝试暂停
            </summary>
            <returns>如果执行了Pause返回true</returns>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorUtils.TryActivate(XxDefinitions.Behavior.IBehavior)">
            <summary>
            尝试激活
            </summary>
            <returns>如果执行了Activate返回true</returns>
        </member>
        <member name="T:XxDefinitions.Behavior.IBehaviorComponent`1">
            <summary>
            通过组合模式操作behavior
            Add应在Initialize前完成，否则应该报错
            否则可能出现联机同步错误
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.IBehaviorComponent`1.Add(`0,System.Boolean)">
            <summary>
            加入成员，应在Initialize前完成
            </summary>
        </member>
        <member name="T:XxDefinitions.Behavior.BehaviorComponent`1">
            <summary>
            通过组合模式操作behavior
            </summary>
        </member>
        <member name="P:XxDefinitions.Behavior.BehaviorComponent`1.NetUpdateThis">
            <summary>
            是否同步自己
            </summary>
        </member>
        <member name="P:XxDefinitions.Behavior.BehaviorComponent`1.NetUpdate">
            <summary>
            如果存在需要同步的组件则同步
            </summary>
        </member>
        <member name="F:XxDefinitions.Behavior.BehaviorComponent`1.BehaviorsList">
            <summary>
            装有Behavior的容器
            </summary>
        </member>
        <member name="F:XxDefinitions.Behavior.BehaviorComponent`1.BehaviorsUsing">
            <summary>
            表示Behavior是否正在使用
            </summary>
        </member>
        <member name="P:XxDefinitions.Behavior.BehaviorComponent`1.NextID">
            <summary>
            下一个可用ID
            </summary>
        </member>
        <member name="P:XxDefinitions.Behavior.BehaviorComponent`1.Item(System.Int32)">
            <summary>
            获取Behavior
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorComponent`1.OnAdd(`0,System.Int32)">
            <summary>
            在加入成员时（已经加入BehaviorsList）
            </summary>
        </member>
        <member name="T:XxDefinitions.Behavior.BehaviorSet`1">
            <summary>
            用于操作行为集的类
            </summary>
        </member>
        <member name="F:XxDefinitions.Behavior.BehaviorSet`1.BehaviorsList">
            <summary>
            装行为的容器
            </summary>
        </member>
        <member name="P:XxDefinitions.Behavior.BehaviorSet`1.Item(System.Int32)">
            <summary>
            用id获取行为
            </summary>
        </member>
        <member name="P:XxDefinitions.Behavior.BehaviorSet`1.Item(XxDefinitions.IndexList{System.String})">
            <summary>
            用索引获取行为
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorSet`1.GetID(XxDefinitions.IndexList{System.String})">
            <summary>
            用索引获取id
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorSet`1.GetBehavior(System.Int32)">
            <summary>
            用id获取行为
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorSet`1.GetBehavior(XxDefinitions.IndexList{System.String})">
            <summary>
            用索引获取行为
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorSet`1.GetBehaviorID(XxDefinitions.IndexList{System.String})">
            <summary>
            用索引获取行为的id
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorSet`1.GetEnumerator">
            <summary>
            只枚举正在运行的ModNPCBehavior的ID,按注册顺序
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            只枚举正在运行的ModNPCBehavior,按注册顺序
            </summary>
        </member>
        <member name="P:XxDefinitions.Behavior.BehaviorSet`1.BehaviorMainID">
            <summary>
            正在进行的主要的行为的id
            </summary>
        </member>
        <member name="P:XxDefinitions.Behavior.BehaviorSet`1.BehaviorMain">
            <summary>
            正在进行的主要的行为
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorSet`1.SetBehaviorMain(System.Int32)">
            <summary>
            改变主要行为或设置初始主要行为
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorSet`1.RegisterBehavior(`0,XxDefinitions.IndexList{System.String})">
            <summary>
            注册行为
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorSet`1.NetUpdateSend(System.IO.BinaryWriter)">
            <summary>
            联机同步发送
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorSet`1.NetUpdateReceive(System.IO.BinaryReader)">
            <summary>
            联机同步接收
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorSet`1.Update">
            <summary>
            先执行主要的行为，在执行全部进行的行为
            </summary>
        </member>
        <member name="M:XxDefinitions.Behavior.BehaviorSet`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:XxDefinitions.BitOperate">
            <summary>
            位操作
            </summary>
        </member>
        <member name="M:XxDefinitions.BitOperate.MakeBit1s(System.Int32)">
            <summary>
            Make 1 Bits
            example:MakeBit1s(4)==0xf(1111)
            </summary>
            <param name="s">Length of 1</param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.BitOperate.GetBits(System.Int32,System.Int32,System.Int32)">
             <summary>
             Sub bits at l to l+s
             <code>example:GetBits(101101110,2,3)
            _101101110
            _    [ ]
            _    011(return)</code>
             </summary>
             <param name="d"></param>
             <param name="l"></param>
             <param name="s"></param>
             <returns></returns>
        </member>
        <member name="M:XxDefinitions.BitOperate.ClearBits(System.Int32,System.Int32,System.Int32)">
             <summary>
             <code>Set bits in [l,l+s] by 0
             example:ClearBits(101101110,2,3)
            _101101110
            _    [ ]
            _101100010(return)</code>
             </summary>
             <param name="d"></param>
             <param name="l"></param>
             <param name="s"></param>
             <returns></returns>
        </member>
        <member name="M:XxDefinitions.BitOperate.ClearOutsideBits(System.Int32,System.Int32,System.Int32)">
             <summary>
             <code>Set bits outside [l,l+s] by 0
             example:ClearBits(101101110,2,3)
            _101101110
            _    [ ]
            _000001100(return)</code>
             </summary>
             <param name="d"></param>
             <param name="l"></param>
             <param name="s"></param>
             <returns></returns>
        </member>
        <member name="M:XxDefinitions.BitOperate.SetBits(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             <para>Set bits in [l,l+s] with v</para>
             <code>example:SetBits(101101110,1110,2,3)
            _101001110
            _    [ ]
            _   1110
            _101011010(return)</code>
             </summary>
             <param name="d"></param>
             <param name="v"></param>
             <param name="l"></param>
             <param name="s"></param>
             <returns></returns>
        </member>
        <member name="M:XxDefinitions.BitOperate.ToBitString(System.Byte[])">
            <summary>
            Make string by bits
            Note that left is low
            example:ToBitString(IToBytes(0xf))
            0xf(int)
            11110000000000000000000000000000
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:XxDefinitions.BitSeparator">
            <summary>
            将int按位分离操作
            </summary>
        </member>
        <member name="M:XxDefinitions.BitSeparator.ToString">
            <summary>
            显示所有分离结果值
            </summary>
            <returns></returns>
        </member>
        <member name="F:XxDefinitions.BitSeparator.SeparateDistance">
            <summary>
            按位分离长度
            </summary>
        </member>
        <member name="F:XxDefinitions.BitSeparator.SeparateIndex">
            <summary>
            按位分离位置
            </summary>
        </member>
        <member name="F:XxDefinitions.BitSeparator.SeparatedNumber">
            <summary>
            被分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.BitSeparator.#ctor(XxDefinitions.IGetSetValue{System.Int32},System.Int32[])">
            <summary>
            初始化，自动生成SeparateIndex
            </summary>
        </member>
        <member name="M:XxDefinitions.BitSeparator.#ctor(XxDefinitions.IGetSetValue{System.Int32},System.Int32[],System.Int32[])">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XxDefinitions.BitSeparator.Get(System.Int32)">
            <summary>
            获取分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.BitSeparator.Set(System.Int32,System.Int32)">
            <summary>
            设置分离的值
            </summary>
        </member>
        <member name="P:XxDefinitions.BitSeparator.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:XxDefinitions.BitSeparatorFactory">
            <summary>
            按位分离的工厂
            </summary>
        </member>
        <member name="F:XxDefinitions.BitSeparatorFactory.SeparateDistance">
            <summary>
            按位分离长度
            </summary>
        </member>
        <member name="F:XxDefinitions.BitSeparatorFactory.SeparateIndex">
            <summary>
            按位分离位置
            </summary>
        </member>
        <member name="M:XxDefinitions.BitSeparatorFactory.#ctor(System.Int32[])">
            <summary>
            初始化，自动生成SeparateIndex
            </summary>
        </member>
        <member name="M:XxDefinitions.BitSeparatorFactory.Build(XxDefinitions.IGetSetValue{System.Int32})">
            <summary>
            创建BitSeparator
            </summary>
        </member>
        <member name="M:XxDefinitions.BitSeparatorFactory.Get(XxDefinitions.IGetSetValue{System.Int32},System.Int32)">
            <summary>
            获取分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.BitSeparatorFactory.Set(XxDefinitions.IGetSetValue{System.Int32},System.Int32,System.Int32)">
            <summary>
            设置分离的值
            </summary>
        </member>
        <member name="T:XxDefinitions.UIntSeparator">
            <summary>
            将uint按值分离操作
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparator.ToString">
            <summary>
            显示所有分离结果值
            </summary>
            <returns></returns>
        </member>
        <member name="F:XxDefinitions.UIntSeparator.SeparateDistance">
            <summary>
            分离长度
            </summary>
        </member>
        <member name="F:XxDefinitions.UIntSeparator.SeparateIndex">
            <summary>
            分离位置
            </summary>
        </member>
        <member name="F:XxDefinitions.UIntSeparator.SeparatedNumber">
            <summary>
            被分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparator.#ctor(XxDefinitions.IGetSetValue{System.UInt32},System.UInt32[])">
            <summary>
            初始化，自动生成SeparateIndex
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparator.#ctor(XxDefinitions.IGetSetValue{System.UInt32},System.UInt32[],System.UInt32[])">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparator.Get(System.Int32)">
            <summary>
            获取分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparator.Set(System.Int32,System.UInt32)">
            <summary>
            设置分离的值
            </summary>
        </member>
        <member name="P:XxDefinitions.UIntSeparator.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparator.Check(System.Int32,System.UInt32)">
            <summary>
            检查值是否在范围内
            </summary>
        </member>
        <member name="T:XxDefinitions.UIntSeparatorFactory">
            <summary>
            uint按值分离的工厂
            </summary>
        </member>
        <member name="F:XxDefinitions.UIntSeparatorFactory.SeparateDistance">
            <summary>
            分离长度
            </summary>
        </member>
        <member name="F:XxDefinitions.UIntSeparatorFactory.SeparateIndex">
            <summary>
            分离位置
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparatorFactory.#ctor(System.UInt32[])">
            <summary>
            初始化，自动生成SeparateIndex
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparatorFactory.Build(XxDefinitions.IGetSetValue{System.UInt32})">
            <summary>
            创建UIntSeparator
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparatorFactory.Get(XxDefinitions.IGetValue{System.UInt32},System.Int32)">
            <summary>
            获取分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparatorFactory.Get(System.UInt32,System.Int32)">
            <summary>
            获取分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparatorFactory.Set(XxDefinitions.IGetSetValue{System.UInt32},System.Int32,System.UInt32)">
            <summary>
            设置分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparatorFactory.Set(System.UInt32@,System.Int32,System.UInt32)">
            <summary>
            设置分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparatorFactory.Set(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            设置分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.UIntSeparatorFactory.Check(System.Int32,System.UInt32)">
            <summary>
            检查值是否在范围内
            </summary>
        </member>
        <member name="T:XxDefinitions.IntSeparator">
            <summary>
            将int按值分离操作
            但不会有负数，设置为负数会出错
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparator.ToString">
            <summary>
            显示所有分离结果值
            </summary>
            <returns></returns>
        </member>
        <member name="F:XxDefinitions.IntSeparator.SeparateDistance">
            <summary>
            分离长度
            </summary>
        </member>
        <member name="F:XxDefinitions.IntSeparator.SeparateIndex">
            <summary>
            分离位置
            </summary>
        </member>
        <member name="F:XxDefinitions.IntSeparator.SeparatedNumber">
            <summary>
            被分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparator.#ctor(XxDefinitions.IGetSetValue{System.Int32},System.Int32[])">
            <summary>
            初始化，自动生成SeparateIndex
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparator.#ctor(XxDefinitions.IGetSetValue{System.Int32},System.Int32[],System.Int32[])">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparator.Get(System.Int32)">
            <summary>
            获取分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparator.Set(System.Int32,System.Int32)">
            <summary>
            设置分离的值，使用负数会报错
            </summary>
        </member>
        <member name="P:XxDefinitions.IntSeparator.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparator.Check(System.Int32,System.Int32)">
            <summary>
            检查值是否在范围内
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="T:XxDefinitions.IntSeparatorFactory">
            <summary>
            int按值分离的工厂
            但不会有负数，设置为负数会出错
            </summary>
        </member>
        <member name="F:XxDefinitions.IntSeparatorFactory.SeparateDistance">
            <summary>
            分离长度
            </summary>
        </member>
        <member name="F:XxDefinitions.IntSeparatorFactory.SeparateIndex">
            <summary>
            分离位置
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparatorFactory.#ctor(System.Int32[])">
            <summary>
            初始化，自动生成SeparateIndex
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparatorFactory.Build(XxDefinitions.IGetSetValue{System.Int32})">
            <summary>
            创建IntSeparator
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparatorFactory.Get(XxDefinitions.IGetValue{System.Int32},System.Int32)">
            <summary>
            获取分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparatorFactory.Get(System.Int32,System.Int32)">
            <summary>
            获取分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparatorFactory.Check(System.Int32,System.Int32)">
            <summary>
            检查值是否在范围内
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparatorFactory.Set(XxDefinitions.IGetSetValue{System.Int32},System.Int32,System.Int32)">
            <summary>
            设置分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparatorFactory.Set(System.Int32@,System.Int32,System.Int32)">
            <summary>
            设置分离的值
            </summary>
        </member>
        <member name="M:XxDefinitions.IntSeparatorFactory.Set(System.Int32,System.Int32,System.Int32)">
            <summary>
            设置分离的值
            </summary>
        </member>
        <member name="T:XxDefinitions.IDManager">
            <summary>
            用于管理id,但是不能用于检查
            </summary>
        </member>
        <member name="M:XxDefinitions.IDManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XxDefinitions.IDManager.ChangeUsing(System.Int32)">
            <summary>
            改变该id的使用状态
            </summary>
        </member>
        <member name="M:XxDefinitions.IDManager.Add(System.Int32)">
            <summary>
            添加id使用
            实为ChangeUsing
            不检查
            </summary>
        </member>
        <member name="M:XxDefinitions.IDManager.Remove(System.Int32)">
            <summary>
            移除id使用
            实为ChangeUsing
            不检查
            </summary>
        </member>
        <member name="M:XxDefinitions.IDManager.NextID">
            <summary>
            获取下一个可用的ID
            </summary>
        </member>
        <member name="M:XxDefinitions.IDManager.LastID">
            <summary>
            获取比所有已用ID都大的第一个可用的ID
            </summary>
        </member>
        <member name="M:XxDefinitions.IDManager.GetEnumerator">
            <summary>
            枚举所有正在使用的id
            </summary>
        </member>
        <member name="M:XxDefinitions.IDManager.Clear">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:XxDefinitions.IDManager.NextID(System.Int32)">
            <summary>
            返回对该id的下一个可用ID(如果id在原范围内)复杂度O(n)
            </summary>
        </member>
        <member name="M:XxDefinitions.IDManager.ToArray">
            <summary>
            所有使用的ID
            </summary>\
        </member>
        <member name="T:XxDefinitions.RefValue`1">
            <summary>
            引用的抽象类
            </summary>
        </member>
        <member name="M:XxDefinitions.RefValue`1.SetFunc(`0)">
            <summary>
            设置值的函数
            </summary>
        </member>
        <member name="M:XxDefinitions.RefValue`1.GetFunc">
            <summary>
            获取值的函数
            </summary>
        </member>
        <member name="P:XxDefinitions.RefValue`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XxDefinitions.GetValue`1.GetFunc">
            <summary>
            获取值的函数
            </summary>
        </member>
        <member name="P:XxDefinitions.GetValue`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XxDefinitions.SetValue`1.SetFunc(`0)">
            <summary>
            设置值的函数
            </summary>
        </member>
        <member name="P:XxDefinitions.SetValue`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:XxDefinitions.RefByDelegate`1">
            <summary>
            通过委派函数实现引用
            </summary>
            <typeparam name="T">引用的对象的类型</typeparam>
        </member>
        <member name="F:XxDefinitions.RefByDelegate`1.SetF">
            <summary>
            设置值的函数
            </summary>
        </member>
        <member name="F:XxDefinitions.RefByDelegate`1.GetF">
            <summary>
            获取值的函数
            </summary>
        </member>
        <member name="M:XxDefinitions.RefByDelegate`1.#ctor(System.Func{`0},System.Action{`0})">
            <summary>
            通过函数创建引用
            </summary>
        </member>
        <member name="F:XxDefinitions.GetByDelegate`1.GetF">
            <summary>
            获取值的函数
            </summary>
        </member>
        <member name="M:XxDefinitions.GetByDelegate`1.#ctor(System.Func{`0})">
            <summary>
            通过函数创建引用
            </summary>
        </member>
        <member name="F:XxDefinitions.SetByDelegate`1.SetF">
            <summary>
            设置值的函数
            </summary>
        </member>
        <member name="M:XxDefinitions.SetByDelegate`1.#ctor(System.Action{`0})">
            <summary>
            通过函数创建引用
            </summary>
        </member>
        <member name="T:XxDefinitions.ClassValue`1">
            <summary>
            使用托管类型表示值
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:XxDefinitions.ClassValue`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:XxDefinitions.IRandom">
            <summary>
            随机数接口
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandom.Sample">
            <summary>
            [0,1)double样本
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandom.IntSample">
            <summary>
            [0,int.MaxValue)整数样本
            </summary>
        </member>
        <member name="T:XxDefinitions.IRandomByDelegate">
            <summary>
            通过委派实现随机数接口
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomByDelegate.Sample">
            <summary>
            通过委派获取样本
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomByDelegate.IntSample">
            <summary>
            通过委派获取样本
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomByDelegate.#ctor(System.Func{System.Double})">
            <summary>
            通过委派实现随机数接口
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomByDelegate.#ctor(System.Func{System.Int32})">
            <summary>
            通过委派实现随机数接口
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomByDelegate.#ctor(System.Func{System.Double},System.Func{System.Int32})">
            <summary>
            通过委派实现随机数接口
            </summary>
        </member>
        <member name="T:XxDefinitions.RandomULong1">
            <summary>
            用一个ulong完成随机数
            </summary>
        </member>
        <member name="F:XxDefinitions.RandomULong1.Value1">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XxDefinitions.RandomULong1.#ctor(XxDefinitions.IGetSetValue{System.UInt64})">
            <summary>
            操作value1生成随机数
            </summary>
        </member>
        <member name="M:XxDefinitions.RandomULong1.IntSample">
            <summary>
            IntSample
            </summary>
        </member>
        <member name="M:XxDefinitions.RandomULong1.Sample">
            <summary>
            Sample
            </summary>
        </member>
        <member name="M:XxDefinitions.RandomULong1.AddRand(System.UInt64)">
            <summary>
            加入一个数以增强随机
            </summary>
            <param name="v"></param>
        </member>
        <member name="T:XxDefinitions.RandomInt1">
            <summary>
            用1个int完成随机数
            </summary>
        </member>
        <member name="F:XxDefinitions.RandomInt1.Value1">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XxDefinitions.RandomInt1.#ctor(XxDefinitions.IGetSetValue{System.Int32})">
            <summary>
            操作value1生成随机数
            </summary>
        </member>
        <member name="M:XxDefinitions.RandomInt1.IntSample">
            <summary>
            IntSample
            </summary>
        </member>
        <member name="M:XxDefinitions.RandomInt1.Sample">
            <summary>
            Sample
            </summary>
        </member>
        <member name="M:XxDefinitions.RandomInt1.AddRand(System.Int32)">
            <summary>
            加入一个数以增强随机
            </summary>
        </member>
        <member name="T:XxDefinitions.RandomInt2">
            <summary>
            用2个int完成随机数
            </summary>
        </member>
        <member name="F:XxDefinitions.RandomInt2.Value1">
            <summary>
            值
            </summary>
        </member>
        <member name="F:XxDefinitions.RandomInt2.Value2">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XxDefinitions.RandomInt2.#ctor(XxDefinitions.IGetSetValue{System.Int32},XxDefinitions.IGetSetValue{System.Int32})">
            <summary>
            操作value1生成随机数
            </summary>
        </member>
        <member name="M:XxDefinitions.RandomInt2.IntSample">
            <summary>
            IntSample
            </summary>
        </member>
        <member name="M:XxDefinitions.RandomInt2.Sample">
            <summary>
            Sample
            </summary>
        </member>
        <member name="M:XxDefinitions.RandomInt2.AddRand(System.Int32)">
            <summary>
            加入一个数以增强随机
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:XxDefinitions.IRandomUtils">
            <summary>
            随机数接口的方法
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomUtils.NextIntSeed(System.Int32)">
            <summary>
            对该seed生成下一个seed，可以小于0
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomUtils.NextUIntSeed(System.UInt32)">
            <summary>
            对该seed生成下一个seed
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomUtils.ToIRandom(Terraria.Utilities.UnifiedRandom)">
            <summary>
            将Terraria.Utilities.UnifiedRandom转为IRandom
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomUtils.NextVectorInRect(XxDefinitions.IRandom,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            获取在Range内的向量
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomUtils.NextVector2Square(XxDefinitions.IRandom,System.Single,System.Single)">
            <summary>
            获取XY在[min,max)的向量
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomUtils.NextVector2Unit(XxDefinitions.IRandom,System.Single,System.Single)">
            <summary>
            获取单位向量
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomUtils.NextVector2Ellipse(XxDefinitions.IRandom,System.Single,System.Single)">
            <summary>
            获取在椭圆x^2/a^2+y^2/b^2=1内的向量
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomUtils.NextVector2EllipseEdge(XxDefinitions.IRandom,System.Single,System.Single)">
            <summary>
            获取在椭圆x^2/a^2+y^2/b^2=1上的向量
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomUtils.NextVector2Circular(XxDefinitions.IRandom,System.Single)">
            <summary>
            获取在圆内的向量
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomUtils.NextVector2CircularEdge(XxDefinitions.IRandom,System.Single)">
            <summary>
            获取在圆上的向量
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomUtils.NextGaussian(XxDefinitions.IRandom)">
            <summary>
            获取符合正态分布的随机数
            </summary>
        </member>
        <member name="M:XxDefinitions.IRandomUtils.NextGaussian(XxDefinitions.IRandom,System.Double,System.Double)">
            <summary>
            获取符合正态分布的随机数
            </summary>
        </member>
        <member name="T:XxDefinitions.ItemTree`2">
            <summary>
            提供以树结构来管理元素的方法
            </summary>
            <typeparam name="IndexType"></typeparam>
            <typeparam name="ItemType"></typeparam>
        </member>
        <member name="F:XxDefinitions.ItemTree`2.value">
            <summary>
            该节点元素
            </summary>
        </member>
        <member name="P:XxDefinitions.ItemTree`2.Value">
            <summary>
            该节点元素
            </summary>
        </member>
        <member name="F:XxDefinitions.ItemTree`2.Father">
            <summary>
            父亲
            </summary>
        </member>
        <member name="F:XxDefinitions.ItemTree`2.indexFromFather">
            <summary>
            在父亲中的索引
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.#ctor(`1)">
            <summary>
            创建含有item的ItemTree
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.#ctor(XxDefinitions.ItemTree{`0,`1})">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.#ctor">
            <summary>
            创建空ItemTree
            </summary>
        </member>
        <member name="P:XxDefinitions.ItemTree`2.NodeCount">
            <summary>
            该节点的孩子数量
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.ElementCount">
            <summary>
            该节点以下所有元素数量
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.Contains(`0)">
            <summary>
            包含该索引指向的ItemTree
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.Contains(XxDefinitions.IndexList{`0})">
            <summary>
            包含该索引指向的ItemTree
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.ContainsValue(XxDefinitions.IndexList{`0})">
            <summary>
            包含该索引指向的ItemTree且该ItemTree有值
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.AddClone(XxDefinitions.ItemTree{`0,`1})">
            <summary>
            克隆整个groupTree加入自己
            </summary>
            <param name="groupTree"></param>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.Add(`0,XxDefinitions.ItemTree{`0,`1})">
            <summary>
            加入groupTree于index处
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.Add(`0,`1)">
            <summary>
            加入new ItemTree(item)于index处
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.Add(XxDefinitions.IndexList{`0},XxDefinitions.ItemTree{`0,`1})">
            <summary>
            加入groupTree于index处
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.Add(XxDefinitions.IndexList{`0},`1)">
            <summary>
            加入new ItemTree(item)于index处
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.Remove(`0)">
            <summary>
            移除于index处的孩子并清理
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.Remove(XxDefinitions.IndexList{`0})">
            <summary>
            移除于index处的孩子并清理
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.RemoveItem(XxDefinitions.IndexList{`0})">
            <summary>
            移除于index处的元素并清理
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.IsNull">
            <summary>
            该节点为空，可以清理
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.RemoveNullSuns">
            <summary>
            清理孩子
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.RemoveNulls">
            <summary>
            清理孩子并向上递归
            </summary>
        </member>
        <member name="P:XxDefinitions.ItemTree`2.Item(`0)">
            <summary>
            获取位于index的ItemTree
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.Get(`0)">
            <summary>
            获取位于index的ItemTree
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.Get(XxDefinitions.IndexList{`0})">
            <summary>
            获取位于index的ItemTree
            </summary>
        </member>
        <member name="P:XxDefinitions.ItemTree`2.Item(XxDefinitions.IndexList{`0})">
            <summary>
            获取位于index的ItemTree
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.GetEnumerator">
            <summary>
            枚举所有元素
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.GetIndex(System.Int32)">
            <summary><![CDATA[
            获取从第depth个父亲到自己的索引
            如果到达根节点则终止（返回从根节点到自己的索引）]]>
            </summary>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.ItemTree`2.EnumAt(XxDefinitions.IndexList{`0})">
            <summary>
            Enum At IndicesAt
            The returned item.Key including IndicesAt
            which Enum this.Get(IndicesAt) don't have
            </summary>
            <param name="IndicesAt"></param>
            <returns></returns>
        </member>
        <member name="T:XxDefinitions.ItemTree`2.ItemTreeEnumer">
            <summary>
            从某个节点出发枚举在另一个节点的全部元素（在节点的枚举的索引加上一部分）
            </summary>
        </member>
        <member name="T:XxDefinitions.IndexList`1">
            <summary>
            通过链表管理一串索引
            </summary>
            <typeparam name="IndexType">索引类型</typeparam>
        </member>
        <member name="M:XxDefinitions.IndexList`1.ToString">
            <summary>
            列出全部节点
            </summary>
        </member>
        <member name="F:XxDefinitions.IndexList`1.Indices">
            <summary>
            索引列表
            </summary>
        </member>
        <member name="P:XxDefinitions.IndexList`1.First">
            <summary>
            第一个索引
            </summary>
        </member>
        <member name="P:XxDefinitions.IndexList`1.Last">
            <summary>
            最后一个索引
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.#ctor(`0)">
            <summary>
            创建一个只含有一个index的IndexList
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XxDefinitions.IndexList`1.#ctor">
            <summary>
            创建一个空IndexList
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.#ctor(XxDefinitions.IndexList{`0})">
            <summary>
            克隆IndexList
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.#ctor(`0[])">
            <summary>
            创建含有ns的IndexList
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            克隆IndexList
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.AddLast(`0)">
            <summary>
            在最后加入
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.AddFirst(`0)">
            <summary>
            在开头加入
            </summary>
        </member>
        <member name="P:XxDefinitions.IndexList`1.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.MatchAll(XxDefinitions.IndexList{`0})">
            <summary>
            完整匹配
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.MatchFront(XxDefinitions.IndexList{`0})">
            <summary>
            从开头进行匹配index.Count
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.MatchBack(XxDefinitions.IndexList{`0})">
            <summary>
            从末尾开始向前匹配index.Count
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.FindFirst(`0)">
            <summary>
            找到第一个与index相同的LinkedListNode
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.FindLast(`0)">
            <summary>
            从后往前找到第一个与index相同的LinkedListNode
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.RemoveFront(System.Int32)">
            <summary>
            移除开头的n个元素
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.RemoveBack(System.Int32)">
            <summary>
            移除末尾的n个元素
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.AddBack(XxDefinitions.IndexList{`0})">
            <summary>
            在末尾加入index
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.AddBack(`0)">
            <summary>
            在末尾加入index
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.AddFront(XxDefinitions.IndexList{`0})">
            <summary>
            在开头加入index
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.AddFront(`0)">
            <summary>
            在开头加入index
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.GetEnumerator">
            <summary>
            枚举
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.op_Addition(XxDefinitions.IndexList{`0},XxDefinitions.IndexList{`0})">
            <summary>
            合并（克隆）
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.op_Addition(XxDefinitions.IndexList{`0},`0)">
            <summary>
            合并（克隆）
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.op_Addition(`0,XxDefinitions.IndexList{`0})">
            <summary>
            合并（克隆）
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.Equals(System.Object)">
            <summary>
            判断相同
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.GetHashCode">
            <summary>
            Indices.GetHashCode();
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.CompareTo(XxDefinitions.IndexList{`0})">
            <summary><![CDATA[
            通过Comparer<IndexType>.Default.Compare比较]]>
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.op_Equality(XxDefinitions.IndexList{`0},XxDefinitions.IndexList{`0})">
            <summary>
            判断相同
            </summary>
        </member>
        <member name="M:XxDefinitions.IndexList`1.op_Inequality(XxDefinitions.IndexList{`0},XxDefinitions.IndexList{`0})">
            <summary>
            判断不同
            </summary>
        </member>
        <member name="T:XxDefinitions.ListWithID`1">
            <summary>
            
            </summary>
            <typeparam name="T">元素类型，认为default(T)为空</typeparam>
        </member>
        <member name="F:XxDefinitions.ListWithID`1.iDManager">
            <summary>
            管理ID
            </summary>
        </member>
        <member name="P:XxDefinitions.ListWithID`1.NextID">
            <summary>
            下一个可用的id
            </summary>
        </member>
        <member name="P:XxDefinitions.ListWithID`1.Keys">
            <summary>
            克隆键列表
            </summary>
        </member>
        <member name="P:XxDefinitions.ListWithID`1.Values">
            <summary>
            克隆值列表
            </summary>
        </member>
        <member name="P:XxDefinitions.ListWithID`1.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="P:XxDefinitions.ListWithID`1.IsReadOnly">
            <summary>
            false
            </summary>
        </member>
        <member name="F:XxDefinitions.ListWithID`1.IDToItem">
            <summary>
            从ID索引元素
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithID`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithID`1.ReSizeUp(System.Int32)">
            <summary>
            向上调整大小达到size
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithID`1.ReSizeDown(System.Int32)">
            <summary>
            向下调整大小不低于size
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithID`1.ReSize(System.Int32)">
            <summary>
            调整大小
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithID`1.Add(`0)">
            <summary>
            在第一个用的id处加入Item
            </summary>
            <param name="Item"></param>
            <returns>Item的id</returns>
        </member>
        <member name="M:XxDefinitions.ListWithID`1.Add(System.Int32,`0)">
            <summary>
            在id处加入Item
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithID`1.SafelyAdd(`0,System.Int32)">
            <summary>
            安全的在id加入Item,如果存在则在第一个用的id处加入Item
            </summary>
            <param name="Item"></param>
            <param name="id"></param>
            <returns>Item的id</returns>
        </member>
        <member name="M:XxDefinitions.ListWithID`1.Remove(System.Int32)">
            <summary>
            移除位于id处的元素
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithID`1.SafelyRemove(System.Int32)">
            <summary>
            安全的移除位于id处的元素
            </summary>
            <param name="id"></param>
            <returns>是否成功被移除</returns>
        </member>
        <member name="M:XxDefinitions.ListWithID`1.Get(System.Int32)">
            <summary>
            获取在id处的元素
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithID`1.Set(System.Int32,`0)">
            <summary>
            更改在id处的元素
            </summary>
        </member>
        <member name="P:XxDefinitions.ListWithID`1.Item(System.Int32)">
            <summary>
            在id处的元素
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithID`1.GetEnumerator">
            <summary>
            枚举
            </summary>
        </member>
        <member name="T:XxDefinitions.ItemTreeWithID`2">
            <summary>
            提供了结合ItemTree和ID来管理Item的类，但是不能移除
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTreeWithID`2.GetID(XxDefinitions.IndexList{`0})">
            <summary>
            用索引获取元素的id
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTreeWithID`2.GetIndex(System.Int32)">
            <summary>
            用id获取元素的索引
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTreeWithID`2.GetItem(System.Int32)">
            <summary>
            用id获取元素
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTreeWithID`2.GetItem(XxDefinitions.IndexList{`0})">
            <summary>
            用index获取元素
            </summary>
        </member>
        <member name="P:XxDefinitions.ItemTreeWithID`2.Item(System.Int32)">
            <summary>
            用id获取元素
            </summary>
        </member>
        <member name="P:XxDefinitions.ItemTreeWithID`2.Item(XxDefinitions.IndexList{`0})">
            <summary>
            用index获取元素
            </summary>
        </member>
        <member name="P:XxDefinitions.ItemTreeWithID`2.Count">
            <summary>
            元素的数量
            </summary>
        </member>
        <member name="P:XxDefinitions.ItemTreeWithID`2.NextID">
            <summary>
            下一个可用的ID
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTreeWithID`2.Add(`1,XxDefinitions.IndexList{`0})">
            <summary>
            加入元素
            </summary>
            <returns>元素的id</returns>
        </member>
        <member name="M:XxDefinitions.ItemTreeWithID`2.Add(`1)">
            <summary>
            在无索引的情况下加入元素，该元素没有索引
            </summary>
        </member>
        <member name="M:XxDefinitions.ItemTreeWithID`2.GetEnumerator">
            <summary>
            按ID枚举全部对象
            </summary>
        </member>
        <member name="T:XxDefinitions.ListWithIDandIndex`2">
            <summary>
            提供了结合ItemTree和ID来管理Item的类，可以移除
            </summary>
        </member>
        <member name="F:XxDefinitions.ListWithIDandIndex`2.IndexToID">
            <summary>
            Index->ID
            </summary>
        </member>
        <member name="F:XxDefinitions.ListWithIDandIndex`2.IDToIndex">
            <summary>
            ID->Index
            </summary>
        </member>
        <member name="F:XxDefinitions.ListWithIDandIndex`2.IDToItem">
            <summary>
            ID->Item
            </summary>
        </member>
        <member name="P:XxDefinitions.ListWithIDandIndex`2.NextID">
            <summary>
            下一个可用的ID
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndex`2.GetID(XxDefinitions.IndexList{`0})">
            <summary>
            用索引获取元素的id
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndex`2.GetIndex(System.Int32)">
            <summary>
            用id获取元素的索引
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndex`2.Get(XxDefinitions.IndexList{`0})">
            <summary>
            用index获取元素
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndex`2.Set(XxDefinitions.IndexList{`0},`1)">
            <summary>
            用index获取元素更改
            </summary>
        </member>
        <member name="P:XxDefinitions.ListWithIDandIndex`2.Item(XxDefinitions.IndexList{`0})">
            <summary>
            用index获取元素
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndex`2.Get(System.Int32)">
            <summary>
            用ID获取元素
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndex`2.Set(System.Int32,`1)">
            <summary>
            用ID获取元素
            </summary>
        </member>
        <member name="P:XxDefinitions.ListWithIDandIndex`2.Item(System.Int32)">
            <summary>
            用index获取元素
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndex`2.Add(`1,XxDefinitions.IndexList{`0},System.Int32)">
            <summary>
            加入元素
            </summary>
            <returns>元素的id</returns>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndex`2.Add(`1)">
            <summary>
            在第一个可用的id加入Item,该Item无index
            </summary>
            <returns>Item的id</returns>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndex`2.GetEnumerator">
            <summary>
            枚举ID,ItemType
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndex`2.Remove(System.Int32)">
            <summary>
            移除位于id的元素
            </summary>
        </member>
        <member name="T:XxDefinitions.ListWithIDandIndexType`2">
            <summary>
            提供了结合IndexType和ID来管理Item的类
            </summary>
        </member>
        <member name="F:XxDefinitions.ListWithIDandIndexType`2.IndexToID">
            <summary>
            Index->ID
            </summary>
        </member>
        <member name="F:XxDefinitions.ListWithIDandIndexType`2.IDToIndex">
            <summary>
            ID->Index
            </summary>
        </member>
        <member name="F:XxDefinitions.ListWithIDandIndexType`2.IDToItem">
            <summary>
            ID->Item
            </summary>
        </member>
        <member name="P:XxDefinitions.ListWithIDandIndexType`2.NextID">
            <summary>
            下一个可用的ID
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndexType`2.GetID(`0)">
            <summary>
            用索引获取元素的id
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndexType`2.GetIndex(System.Int32)">
            <summary>
            用id获取元素的索引
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndexType`2.Get(`0)">
            <summary>
            用index获取元素
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndexType`2.Set(`0,`1)">
            <summary>
            用index获取元素更改
            </summary>
        </member>
        <member name="P:XxDefinitions.ListWithIDandIndexType`2.Item(`0)">
            <summary>
            用index获取元素，set 会根据id移动item
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndexType`2.Get(System.Int32)">
            <summary>
            用ID获取元素
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndexType`2.Set(System.Int32,`1)">
            <summary>
            用ID获取元素
            </summary>
        </member>
        <member name="P:XxDefinitions.ListWithIDandIndexType`2.Item(System.Int32)">
            <summary>
            用index获取元素
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndexType`2.Add(`1,`0,System.Int32)">
            <summary>
            加入元素
            </summary>
            <returns>元素的id</returns>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndexType`2.Add(`1)">
            <summary>
            在第一个可用的id加入Item,该Item无index
            </summary>
            <returns>Item的id</returns>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndexType`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#Int32,ItemType}}#GetEnumerator">
            <summary>
            枚举ID,ItemType
            </summary>
        </member>
        <member name="M:XxDefinitions.ListWithIDandIndexType`2.Remove(System.Int32)">
            <summary>
            移除位于id的元素
            </summary>
        </member>
        <member name="T:XxDefinitions.LogWithUsing">
            <summary>
            带有开关的Log，在!Using时不会记录
            </summary>
        </member>
        <member name="T:XxDefinitions.INetPacketTree">
            <summary>
            NetPacketTree的借口
            </summary>
        </member>
        <member name="M:XxDefinitions.INetPacketTree.GetPacket">
            <summary>
            获取到该节点的Packet
            </summary>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.INetPacketTree.Handle(System.IO.BinaryReader,System.Int32)">
            <summary>
            到该节点时执行的函数
            </summary>
            <param name="reader">Packet</param>
            <param name="whoAmI">发出Packet的玩家</param>
        </member>
        <member name="T:XxDefinitions.INetPacketTreeChild`1">
            <summary>
            作为Packet操作的后续结点接口
            </summary>
            <typeparam name="FatherType"></typeparam>
        </member>
        <member name="P:XxDefinitions.INetPacketTreeChild`1.Father">
            <summary>
            该节点的父亲
            </summary>
        </member>
        <member name="P:XxDefinitions.INetPacketTreeChild`1.childKey">
            <summary>
            自己在父亲中的Key
            </summary>
        </member>
        <member name="T:XxDefinitions.NetPacketTreeFather`1">
            <summary>
            作为Packet操作的前驱结点类，支持任意标识ChildType
            设置SetBinary，GetBinary来设置从ChildType输入输出Binary的方法
            用AddChild加入子节点，会自动设置Binary来传给对应的Child
            </summary>
        </member>
        <member name="T:XxDefinitions.NetPacketTreeFather`1.DWriteBinary">
            <summary>
            WriteBinary的委派
            </summary>
        </member>
        <member name="F:XxDefinitions.NetPacketTreeFather`1.WriteBinary">
            <summary>
            用于从data输入Binary
            </summary>
        </member>
        <member name="T:XxDefinitions.NetPacketTreeFather`1.DReadBinary">
            <summary>
            ReadBinary的委派
            </summary>
        </member>
        <member name="F:XxDefinitions.NetPacketTreeFather`1.ReadBinary">
            <summary>
            用于从Binary得到data
            </summary>
        </member>
        <member name="F:XxDefinitions.NetPacketTreeFather`1.NetPacketTreeChilds">
            <summary>
            存储子节点的表
            </summary>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeFather`1.GetPacketChild(`0)">
            <summary>
            获取用于子节点的Packet
            </summary>
            <param name="childKey">子节点的Key</param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeFather`1.GetPacket">
            <summary>
            获取到该节点的Packet
            </summary>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeFather`1.Handle(System.IO.BinaryReader,System.Int32)">
            <summary>
            传输Packet到对应Key的Child
            </summary>
            <param name="reader"></param>
            <param name="whoAmI"></param>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeFather`1.AddChild(XxDefinitions.INetPacketTreeChild{`0},`0)">
            <summary>
            新增Child
            </summary>
            <param name="Child">子节点</param>
            <param name="childKey">子节点的Key</param>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeFather`1.RemoveChild(`0)">
            <summary>
            删除字节点
            </summary>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeFather`1.#ctor(XxDefinitions.NetPacketTreeFather{`0}.DWriteBinary,XxDefinitions.NetPacketTreeFather{`0}.DReadBinary)">
            <summary>
            设置WriteBinary和ReadBinary
            </summary>
        </member>
        <member name="T:XxDefinitions.NetPacketTreeMain`1">
            <summary>
            进行Packet操作的根节点
            </summary>
            <typeparam name="ChildType"></typeparam>
        </member>
        <member name="F:XxDefinitions.NetPacketTreeMain`1.mod">
            <summary>
            该mod
            </summary>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeMain`1.GetPacket">
            <summary>
             mod.GetPacket()
            </summary>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeMain`1.#ctor(Terraria.ModLoader.Mod,XxDefinitions.NetPacketTreeFather{`0}.DWriteBinary,XxDefinitions.NetPacketTreeFather{`0}.DReadBinary)">
            <summary>
            初始化
            </summary>
            <param name="mod">该mod</param>
            <param name="SetBinary">SetBinary方法</param>
            <param name="GetBinary">GetBinary方法</param>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeMain`1.Finalize">
            <summary>
            ~NetPacketTreeMain
            </summary>
        </member>
        <member name="T:XxDefinitions.NetPacketTreeNode`2">
            <summary>
            进行Packet操作的分支结点
            </summary>
            <typeparam name="FatherType"></typeparam>
            <typeparam name="ChildType"></typeparam>
        </member>
        <member name="P:XxDefinitions.NetPacketTreeNode`2.childKey">
            <summary>
            作为子节点在父节点中的Key
            </summary>
        </member>
        <member name="P:XxDefinitions.NetPacketTreeNode`2.Father">
            <summary>
            作为子节点的父节点
            </summary>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeNode`2.GetPacket">
            <summary>
            从父亲获取到此节点的Packet;
            </summary>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeNode`2.#ctor(XxDefinitions.NetPacketTreeFather{`0},`0,XxDefinitions.NetPacketTreeFather{`1}.DWriteBinary,XxDefinitions.NetPacketTreeFather{`1}.DReadBinary)">
            <summary>
            初始化
            </summary>
            <param name="Father">父亲</param>
            <param name="childKey">该节点的Key</param>
            <param name="WriteBinary">SetBinary方法</param>
            <param name="ReadBinary">GetBinary方法</param>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeNode`2.Finalize">
            <summary>
            ~NetPacketTreeNode
            </summary>
        </member>
        <member name="T:XxDefinitions.NetPacketTreeLeaf`1">
            <summary>
            进行Packet操作的叶子结点，进行操作
            </summary>
            <typeparam name="FatherType"></typeparam>
        </member>
        <member name="P:XxDefinitions.NetPacketTreeLeaf`1.childKey">
            <summary>
            作为子节点在父节点中的Key
            </summary>
        </member>
        <member name="P:XxDefinitions.NetPacketTreeLeaf`1.Father">
            <summary>
            作为子节点的父节点
            </summary>
        </member>
        <member name="T:XxDefinitions.NetPacketTreeLeaf`1.DHandleFunction">
            <summary>
            HandleFunction的委派
            </summary>
        </member>
        <member name="F:XxDefinitions.NetPacketTreeLeaf`1.HandleFunction">
            <summary>
            进行操作的函数
            </summary>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeLeaf`1.Handle(System.IO.BinaryReader,System.Int32)">
            <summary>
            使用委派
            </summary>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeLeaf`1.GetPacket">
            <summary>
            从父节点获取Packet
            </summary>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeLeaf`1.#ctor(XxDefinitions.NetPacketTreeLeaf{`0}.DHandleFunction,XxDefinitions.NetPacketTreeFather{`0},`0,System.Action{Terraria.ModLoader.ModPacket})">
            <summary>
            初始化
            </summary>
            <param name="HandleFunction">进行操作的函数</param>
            <param name="Father">父节点</param>
            <param name="childKey">在父节点中的Key</param>
            <param name="AutoDoFunc">自动操作函数</param>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeLeaf`1.Finalize">
             <summary>
            ~NetPacketTreeLeaf
             </summary>
        </member>
        <member name="M:XxDefinitions.NetPacketTreeLeaf`1.AutoDo(System.Int32,System.Int32)">
            <summary>
            用AutoDoFunc自动完成并发送
            </summary>
        </member>
        <member name="F:XxDefinitions.NetPacketTreeLeaf`1.AutoDoFunc">
            <summary>
            用于自动完成ModPacket的函数
            </summary>
        </member>
        <member name="T:XxDefinitions.BinaryIOFunc">
            <summary>
            可用于NetPacketTree的流操作函数
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.CheckTarget">
            <summary>
            自动设置目标，使用Utils.FindTargetClosest
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.CheckTarget.Target">
            <summary>
            找到的目标
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.CheckTarget.DoCalculate">
            <summary>
            是否进行更新，在间隔期，只会判断目标是否可用，并在不可用时更新
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.CheckTarget.PlayerCanBeTargeted">
            <summary>
            玩家是否可以成为目标
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.CheckTarget.NPCCanBeTargeted">
            <summary>
            NPC是否可以成为目标
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.CheckTarget.PlayerValue">
            <summary>
            玩家的值
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.CheckTarget.NPCValue">
            <summary>
            NPC的值
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.CheckTarget.FindFriendly">
            <summary>
            是否寻找友善生物，包括玩家和友好NPC
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.CheckTarget.FindHostile">
            <summary>
            是否寻找邪恶生物
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.CheckTarget.DefaultValue">
            <summary>
            初始价值，相当于距离
            </summary>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.CheckTarget.SetForHostileNPC(System.Func{Terraria.NPC,System.Boolean},System.Func{Terraria.NPC,System.Single})">
            <summary>
            设置为搜索邪恶生物
            </summary>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.CheckTarget.SetForPlayer(System.Func{Terraria.Player,System.Boolean},System.Func{Terraria.Player,System.Single})">
            <summary>
            设置为搜索玩家
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.CopyNPCVanillaAI">
            <summary>
            复制VanillaAI
            用CopyNPCVanillaAI.ai,CopyNPCVanillaAI.localAI（Update时替换与还原npc.ai ...）
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.DoWhenUpdate">
            <summary>
            在相应时机执行
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.DoWhenUpdate.UpdateAction">
            <summary>
            执行时
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.DoWhenUpdate.ActivateAction">
            <summary>
            激活时
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.DoWhenUpdate.PauseAction">
            <summary>
            暂停时
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.GroundNHover">
            <summary>
            选取N个点提供力
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.GroundNHover.HoverPoint">
            <summary>
            点
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.GroundNHover.BarycenterOffsetCenter">
            <summary>
            重心
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.GroundNHover.HoverHigh">
            <summary>
            提供力的高度
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.GroundNHover.HoverForce">
            <summary>
            力的大小
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.GroundNHover.RotaryInertia">
            <summary>
            转动惯量
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.GroundNHover.Mass">
            <summary>
            质量
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.GroundNHover.Palstance">
            <summary>
            角速度
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.GroundNHover.MaxRotation">
            <summary>
            最大转角
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.HangOnNPC">
            <summary>
            保持其在NPC的相对位置上
            在entity无效（!active）时自动暂停
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.HangOnNPC.Offset">
            <summary>
            相对中心的位置
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.HangOnNPC.entity">
            <summary>
            所在的npc
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.HangOnProj">
            <summary>
            保持其在Proj的相对位置上
            在entity无效（!active）时自动暂停
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.HangOnProj.Offset">
            <summary>
            相对中心的位置
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.HangOnProj.entity">
            <summary>
            所在的npc
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.HoverRotation">
            <summary>
            设置NPC悬浮时横向移动时的方向
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.IModNPCBehavior">
            <summary>
            ModNPC的行为的接口
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1">
            <summary>
            ModNPC的行为的基类
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.modNPC">
            <summary>
            被操作的modNPC
            </summary>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.npc">
            <summary>
            被操作的npc
            </summary>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.#ctor(`0)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.ScaleExpertStats(System.Int32,System.Single)">
            <summary>
            Allows you to customize this NPC's stats in expert mode. This is useful because expert mode's doubling of damage and life might be too much sometimes (for example, with bosses). Also useful for scaling life with the number of players in the world.
            </summary>
            <param name="numPlayers"></param>
            <param name="bossLifeScale"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.FindFrame(System.Int32)">
            <summary>
            Allows you to modify the frame from this NPC's texture that is drawn, which is necessary in order to animate NPCs.
            </summary>
            <param name="frameHeight"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.UpdateLifeRegen(System.Int32@)">
            <summary>
            Allows you to make the NPC either regenerate health or take damage over time by setting npc.lifeRegen. Regeneration or damage will occur at a rate of half of npc.lifeRegen per second. The damage parameter is the number that appears above the NPC's head if it takes damage over time.
            </summary>
            <param name="damage"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.SpecialNPCLoot">
            <summary>
            Allows you to call NPCLoot on your own when the NPC dies, rather then letting vanilla call it on its own. Useful for things like dropping loot from the nearest segment of a worm boss. Returns false by default.
            </summary>
            <returns>Return true to stop vanilla from calling NPCLoot on its own. Do this if you call NPCLoot yourself.</returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.PreNPCLoot">
            <summary>
            Allows you to determine whether or not this NPC will drop anything at all. Return false to stop the NPC from dropping anything. Returns true by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.CheckActive">
            <summary>
            Whether or not to run the code for checking whether this NPC will remain active. Return false to stop this NPC from being despawned and to stop this NPC from counting towards the limit for how many NPCs can exist near a player. Returns true by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.CheckDead">
            <summary>
            Whether or not this NPC should be killed when it reaches 0 health. You may program extra effects in this hook (for example, how Golem's head lifts up for the second phase of its fight). Return false to stop this NPC from being killed. Returns true by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.OnCatchNPC(Terraria.Player,Terraria.Item)">
            <summary>
            Allows you to make things happen when this NPC is caught. Ran Serverside
            </summary>
            <param name="player">The player catching this NPC</param>
            <param name="item">The item that will be spawned</param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.BossLoot(System.String@,System.Int32@)">
            <summary>
            Allows you to customize what happens when this boss dies, such as which name is displayed in the defeat message and what type of potion it drops.
            </summary>
            <param name="name"></param>
            <param name="potionType"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.CanHitPlayer(Terraria.Player,System.Int32@)">
            <summary>
            Allows you to determine whether this NPC can hit the given player. Return false to block this NPC from hitting the target. Returns true by default. CooldownSlot determines which of the player's cooldown counters to use (-1, 0, or 1), and defaults to -1.
            </summary>
            <param name="target"></param>
            <param name="cooldownSlot"></param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.ModifyHitPlayer(Terraria.Player,System.Int32@,System.Boolean@)">
            <summary>
            Allows you to modify the damage, etc., that this NPC does to a player.
            </summary>
            <param name="target"></param>
            <param name="damage"></param>
            <param name="crit"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.OnHitPlayer(Terraria.Player,System.Int32,System.Boolean)">
            <summary>
            Allows you to create special effects when this NPC hits a player (for example, inflicting debuffs).
            </summary>
            <param name="target"></param>
            <param name="damage"></param>
            <param name="crit"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.CanHitNPC(Terraria.NPC)">
            <summary>
            Allows you to determine whether this NPC can hit the given friendly NPC. Return true to allow hitting the target, return false to block this NPC from hitting the target, and return null to use the vanilla code for whether the target can be hit. Returns null by default.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.ModifyHitNPC(Terraria.NPC,System.Int32@,System.Single@,System.Boolean@)">
            <summary>
            Allows you to modify the damage, knockback, etc., that this NPC does to a friendly NPC.
            </summary>
            <param name="target"></param>
            <param name="damage"></param>
            <param name="knockback"></param>
            <param name="crit"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.OnHitNPC(Terraria.NPC,System.Int32,System.Single,System.Boolean)">
            <summary>
            Allows you to create special effects when this NPC hits a friendly NPC.
            </summary>
            <param name="target"></param>
            <param name="damage"></param>
            <param name="knockback"></param>
            <param name="crit"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.CanBeHitByItem(Terraria.Player,Terraria.Item)">
            <summary>
            Allows you to determine whether this NPC can be hit by the given melee weapon when swung. Return true to allow hitting the NPC, return false to block hitting the NPC, and return null to use the vanilla code for whether the NPC can be hit. Returns null by default.
            </summary>
            <param name="player"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.ModifyHitByItem(Terraria.Player,Terraria.Item,System.Int32@,System.Single@,System.Boolean@)">
            <summary>
            Allows you to modify the damage, knockback, etc., that this NPC takes from a melee weapon.
            </summary>
            <param name="player"></param>
            <param name="item"></param>
            <param name="damage"></param>
            <param name="knockback"></param>
            <param name="crit"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.OnHitByItem(Terraria.Player,Terraria.Item,System.Int32,System.Single,System.Boolean)">
            <summary>
            Allows you to create special effects when this NPC is hit by a melee weapon.
            </summary>
            <param name="player"></param>
            <param name="item"></param>
            <param name="damage"></param>
            <param name="knockback"></param>
            <param name="crit"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.CanBeHitByProjectile(Terraria.Projectile)">
            <summary>
            Allows you to determine whether this NPC can be hit by the given projectile. Return true to allow hitting the NPC, return false to block hitting the NPC, and return null to use the vanilla code for whether the NPC can be hit. Returns null by default.
            </summary>
            <param name="projectile"></param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.ModifyHitByProjectile(Terraria.Projectile,System.Int32@,System.Single@,System.Boolean@,System.Int32@)">
            <summary>
            Allows you to modify the damage, knockback, etc., that this NPC takes from a projectile. This method is only called for the owner of the projectile, meaning that in multi-player, projectiles owned by a player call this method on that client, and projectiles owned by the server such as enemy projectiles call this method on the server.
            </summary>
            <param name="projectile"></param>
            <param name="damage"></param>
            <param name="knockback"></param>
            <param name="crit"></param>
            <param name="hitDirection"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.OnHitByProjectile(Terraria.Projectile,System.Int32,System.Single,System.Boolean)">
            <summary>
            Allows you to create special effects when this NPC is hit by a projectile.
            </summary>
            <param name="projectile"></param>
            <param name="damage"></param>
            <param name="knockback"></param>
            <param name="crit"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.StrikeNPC(System.Double@,System.Int32,System.Single@,System.Int32,System.Boolean@)">
            <summary>
            Allows you to use a custom damage formula for when this NPC takes damage from any source. For example, you can change the way defense works or use a different crit multiplier. Return false to stop the game from running the vanilla damage formula; returns true by default.
            </summary>
            <param name="damage"></param>
            <param name="defense"></param>
            <param name="knockback"></param>
            <param name="hitDirection"></param>
            <param name="crit"></param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.BossHeadSlot(System.Int32@)">
            <summary>
            Allows you to customize the boss head texture used by this NPC based on its state.
            Set index to -1 to stop the texture from being displayed.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.BossHeadRotation(System.Single@)">
            <summary>
            Allows you to customize the rotation of this NPC's boss head icon on the map.
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.BossHeadSpriteEffects(Microsoft.Xna.Framework.Graphics.SpriteEffects@)">
            <summary>
            Allows you to flip this NPC's boss head icon on the map.
            </summary>
            <param name="spriteEffects"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.GetAlpha(Microsoft.Xna.Framework.Color)">
            <summary>
            Allows you to determine the color and transparency in which this NPC is drawn. Return null to use the default color (normally light and buff color). Returns null by default.
            </summary>
            <param name="drawColor"></param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.DrawEffects(Microsoft.Xna.Framework.Color@)">
            <summary>
            Allows you to add special visual effects to this NPC (such as creating dust), and modify the color in which the NPC is drawn.
            </summary>
            <param name="drawColor"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.PreDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Color)">
            <summary>
            Allows you to draw things behind this NPC, or to modify the way this NPC is drawn. Return false to stop the game from drawing the NPC (useful if you're manually drawing the NPC). Returns true by default.
            </summary>
            <param name="spriteBatch"></param>
            <param name="drawColor"></param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.PostDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Color)">
            <summary>
            Allows you to draw things in front of this NPC. This method is called even if PreDraw returns false.
            </summary>
            <param name="spriteBatch"></param>
            <param name="drawColor"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.DrawHealthBar(System.Byte,System.Single@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Allows you to control how the health bar for this NPC is drawn. The hbPosition parameter is the same as Main.hbPosition; it determines whether the health bar gets drawn above or below the NPC by default. The scale parameter is the health bar's size. By default, it will be the normal 1f; most bosses set this to 1.5f. Return null to let the normal vanilla health-bar-drawing code to run. Return false to stop the health bar from being drawn. Return true to draw the health bar in the position specified by the position parameter (note that this is the world position, not screen position).
            </summary>
            <param name="hbPosition"></param>
            <param name="scale"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.ResetEffects">
            <summary>
            This is where you reset any fields you add to your subclass to their default states. This is necessary in order to reset your fields if they are conditionally set by a tick update but the condition is no longer satisfied. (Note: This hook is only really useful for GlobalNPC, but is included in ModNPC for completion.)
            </summary>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.CheckConditions(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allows you to define special conditions required for this town NPC's house. For example, Truffle requires the house to be in an aboveground mushroom biome.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="top"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.TownNPCName">
            <summary>
            Allows you to give this town NPC any name when it spawns. By default returns something embarrassing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.UsesPartyHat">
            <summary>
            Allows you to determine whether this town NPC wears a party hat during a party. Returns true by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.CanChat">
            <summary>
            Allows you to determine whether this NPC can talk with the player. By default, returns if the NPC is a town NPC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.GetChat">
            <summary>
            Allows you to give this NPC a chat message when a player talks to it. By default returns something embarrassing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.SetChatButtons(System.String@,System.String@)">
            <summary>
            Allows you to set the text for the buttons that appear on this NPC's chat window. A parameter left as an empty string will not be included as a button on the chat window.
            </summary>
            <param name="button"></param>
            <param name="button2"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.OnChatButtonClicked(System.Boolean,System.Boolean@)">
            <summary>
            Allows you to make something happen whenever a button is clicked on this NPC's chat window. The firstButton parameter tells whether the first button or second button (button and button2 from SetChatButtons) was clicked. Set the shop parameter to true to open this NPC's shop.
            </summary>
            <param name="firstButton"></param>
            <param name="shop"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.SetupShop(Terraria.Chest,System.Int32@)">
            <summary>
            Allows you to add items to this NPC's shop. Add an item by setting the defaults of shop.item[nextSlot] then incrementing nextSlot. In the end, nextSlot must have a value of 1 greater than the highest index in shop.item that contains an item.
            </summary>
            <param name="shop"></param>
            <param name="nextSlot"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.CanGoToStatue(System.Boolean)">
            <summary>
            Whether this NPC can be telported to a King or Queen statue. Returns false by default.
            </summary>
            <param name="toKingStatue">Whether the NPC is being teleported to a King or Queen statue.</param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.OnGoToStatue(System.Boolean)">
            <summary>
            Allows you to make things happen when this NPC teleports to a King or Queen statue.
            This method is only called server side.
            </summary>
            <param name="toKingStatue">Whether the NPC was teleported to a King or Queen statue.</param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.TownNPCAttackStrength(System.Int32@,System.Single@)">
            <summary>
            Allows you to determine the damage and knockback of this town NPC's attack before the damage is scaled. (More information on scaling in GlobalNPC.BuffTownNPCs.)
            </summary>
            <param name="damage"></param>
            <param name="knockback"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.TownNPCAttackCooldown(System.Int32@,System.Int32@)">
            <summary>
            Allows you to determine the cooldown between each of this town NPC's attack. The cooldown will be a number greater than or equal to the first parameter, and less then the sum of the two parameters.
            </summary>
            <param name="cooldown"></param>
            <param name="randExtraCooldown"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.TownNPCAttackProj(System.Int32@,System.Int32@)">
            <summary>
            Allows you to determine the projectile type of this town NPC's attack, and how long it takes for the projectile to actually appear. This hook is only used when the town NPC has an attack type of 0 (throwing), 1 (shooting), or 2 (magic).
            </summary>
            <param name="projType"></param>
            <param name="attackDelay"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.TownNPCAttackProjSpeed(System.Single@,System.Single@,System.Single@)">
            <summary>
            Allows you to determine the speed at which this town NPC throws a projectile when it attacks. Multiplier is the speed of the projectile, gravityCorrection is how much extra the projectile gets thrown upwards, and randomOffset allows you to randomize the projectile's velocity in a square centered around the original velocity. This hook is only used when the town NPC has an attack type of 0 (throwing), 1 (shooting), or 2 (magic).
            </summary>
            <param name="multiplier"></param>
            <param name="gravityCorrection"></param>
            <param name="randomOffset"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.TownNPCAttackShoot(System.Boolean@)">
            <summary>
            Allows you to tell the game that this town NPC has already created a projectile and will still create more projectiles as part of a single attack so that the game can animate the NPC's attack properly. Only used when the town NPC has an attack type of 1 (shooting).
            </summary>
            <param name="inBetweenShots"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.TownNPCAttackMagic(System.Single@)">
            <summary>
            Allows you to control the brightness of the light emitted by this town NPC's aura when it performs a magic attack. Only used when the town NPC has an attack type of 2 (magic)
            </summary>
            <param name="auraLightMultiplier"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.TownNPCAttackSwing(System.Int32@,System.Int32@)">
            <summary>
            Allows you to determine the width and height of the item this town NPC swings when it attacks, which controls the range of this NPC's swung weapon. Only used when the town NPC has an attack type of 3 (swinging).
            </summary>
            <param name="itemWidth"></param>
            <param name="itemHeight"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.DrawTownAttackGun(System.Single@,System.Int32@,System.Int32@)">
            <summary>
            Allows you to customize how this town NPC's weapon is drawn when this NPC is shooting (this NPC must have an attack type of 1). Scale is a multiplier for the item's drawing size, item is the ID of the item to be drawn, and closeness is how close the item should be drawn to the NPC.
            </summary>
            <param name="scale"></param>
            <param name="item"></param>
            <param name="closeness"></param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehavior`1.DrawTownAttackSwing(Microsoft.Xna.Framework.Graphics.Texture2D@,System.Int32@,System.Single@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Allows you to customize how this town NPC's weapon is drawn when this NPC is swinging it (this NPC must have an attack type of 3). Item is the Texture2D instance of the item to be drawn (use Main.itemTexture[id of item]), itemSize is the width and height of the item's hitbox (the same values for TownNPCAttackSwing), scale is the multiplier for the item's drawing size, and offset is the offset from which to draw the item from its normal position.
            </summary>
            <param name="item"></param>
            <param name="itemSize"></param>
            <param name="scale"></param>
            <param name="offset"></param>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.IModNPCBehaviorComponent">
            <summary>
            使用组合模式的IModNPCBehavior
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehaviorComponent`1">
            <summary>
            使用组合模式的ModNPCBehavior
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehaviorComponent`1.modNPC">
            <summary>
            被操作的modNPC
            </summary>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehaviorComponent`1.npc">
            <summary>
            被操作的npc
            </summary>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehaviorComponent`1.#ctor(`0)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehaviorComponent`1.CheckDead">
            <summary>
            会this.Dispose
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehaviorsAutomata">
            <summary>
            ModNPC应用行为自动机的基类
            </summary>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.ModNPCBehaviorsAutomata.CheckDead">
            <summary>
            会BehaviorSet.Dispose
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.NPCBehavior_Hover">
            <summary>
            原版的离地Tilehigh飞行的ai
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.Physics.CircularWhell">
            <summary>
            圆形轮子
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.CircularWhell.Offset">
            <summary>
            相对位置
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.CircularWhell.R">
            <summary>
            半径
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.CircularWhell.Elasticity">
            <summary>
            弹性
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.CircularWhell.N">
            <summary>
            模拟精度
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.CircularWhell.TireR">
            <summary>
            轮胎的半径
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.CircularWhell.RotatePower">
            <summary>
            转动提供的动力（？），顺时针产生的动力为正
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.Physics.EasyWhell">
            <summary>
            简单的模拟轮子，简单而有效
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.EasyWhell.Offset">
            <summary>
            相对中心位置
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.EasyWhell.force">
            <summary>
            力的大小
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.EasyWhell.height">
            <summary>
            高度
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.EasyWhell.WhellForce">
            <summary>
            触地时的牵引力
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.Physics.Gravity">
            <summary>
            重力
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.Gravity.MaxFallSpeed">
            <summary>
            最大下落速度
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.Gravity.g">
            <summary>
            1/60s的加速度
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsEntity">
            <summary>
            模拟物理系统
            被模拟的对象不计算碰撞箱，不碰撞物块，无重力
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsEntity.BarycenterOffsetCenter">
            <summary>
            重心相对npc中心的位置
            </summary>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsEntity.RealBarycenter">
            <summary>
            重心的实际位置
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsEntity.RotaryInertia">
            <summary>
            转动惯量
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsEntity.Mass">
            <summary>
            质量
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsEntity.Palstance">
            <summary>
            角速度
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsEntity.MaxRotation">
            <summary>
            最大旋转角
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsEntity.RotationCorrection">
            <summary>
            角度修正，使得角度向0趋近
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsEntity.PalstanceCorrection">
            <summary>
            角速度阻力
            </summary>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsEntity.#ctor(Terraria.ModLoader.ModNPC,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            创建物理实体
            </summary>
            <param name="modNPC">目标NPC</param>
            <param name="Barycenter">相对npc.position的重心</param>
            <param name="Mass">质量</param>
            <param name="RotaryInertia">转动惯量</param>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsEntity.AddForce(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            施加力
            </summary>
            <param name="Pos">力的实际位置</param>
            <param name="Force">力*60 （每1/60秒的冲量）</param>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPart`1">
            <summary>
            物理系统组件的基类，组件应加在PhysicsEntity中
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPart`1.physicsEntity">
            <summary>
            目标组件
            </summary>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPart`1.AddForce(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            施加力
            </summary>
            <param name="Pos">力的实际位置</param>
            <param name="Force">力的大小</param>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPart`1.BarycenterOffsetCenter">
            <summary>
            重心相对npc中心的位置
            </summary>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPart`1.RealBarycenter">
            <summary>
            重心的实际位置
            </summary>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPart`1.RotaryInertia">
            <summary>
            转动惯量
            </summary>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPart`1.Mass">
            <summary>
            质量
            </summary>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPart`1.Palstance">
            <summary>
            角速度
            </summary>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPart`1.MaxRotation">
            <summary>
            最大旋转角
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPartComponent`1">
            <summary>
            可组合物理系统组件的基类，组件应加在PhysicsEntity中
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPartComponent`1.physicsEntity">
            <summary>
            目标组件
            </summary>
        </member>
        <member name="M:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPartComponent`1.AddForce(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            施加力
            </summary>
            <param name="Pos">力的实际位置</param>
            <param name="Force">力的大小</param>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPartComponent`1.BarycenterOffsetCenter">
            <summary>
            重心相对npc中心的位置
            </summary>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPartComponent`1.RealBarycenter">
            <summary>
            重心的实际位置
            </summary>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPartComponent`1.RotaryInertia">
            <summary>
            转动惯量
            </summary>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPartComponent`1.Mass">
            <summary>
            质量
            </summary>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPartComponent`1.Palstance">
            <summary>
            角速度
            </summary>
        </member>
        <member name="P:XxDefinitions.NPCs.NPCBehaviors.Physics.PhysicsPartComponent`1.MaxRotation">
            <summary>
            最大旋转角
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.Physics.Pusher">
            <summary>
            一直推
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.Pusher.Offset">
            <summary>
            相对位置
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.Pusher.Force">
            <summary>
            力，向下为正
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.Physics.RectangleWhell">
            <summary>
            如果离地距离近则产生力
            组件在产生力时执行
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.RectangleWhell.Offset">
            <summary>
            轮子的相对位置
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.RectangleWhell.Size">
            <summary>
            轮子的长宽
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.RectangleWhell.Elasticity">
            <summary>
            弹性，位置的修正有(1-Elasticity)作用于position,Elasticity产生Force
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.RectangleWhell.SuspensionHigh">
            <summary>
            悬挂长度
            </summary>
        </member>
        <member name="T:XxDefinitions.NPCs.NPCBehaviors.Physics.VerticalGroundHover">
            <summary>
            如果离地距离近则产生力
            组件在产生力时执行
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.VerticalGroundHover.Offset">
            <summary>
            相对中心位置
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.VerticalGroundHover.force">
            <summary>
            力的大小
            </summary>
        </member>
        <member name="F:XxDefinitions.NPCs.NPCBehaviors.Physics.VerticalGroundHover.height">
            <summary>
            高度
            </summary>
        </member>
        <member name="T:XxDefinitions.PlayerControlHelper">
            <summary>
            用于处理玩家操作
            </summary>
        </member>
        <member name="T:XxDefinitions.PlayerControlHelper.ControlFlag">
            <summary>
            玩家操作的标识，用|合并
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.ControlFlag.MouseRight">
            <summary>
            对物品的右键，与左键无关
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.ControlFlag.UpDownLeftRight">
            <summary>
            左右键上下键组合
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.ControlFlag.LeftRight">
            <summary>
            左右键组合
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.player">
            <summary>
            玩家
            </summary>
        </member>
        <member name="P:XxDefinitions.PlayerControlHelper.MouseRight">
            <summary>
            对物品的右键，与左键无关
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.ControlNow">
            <summary>
            现在玩家的控制的状态
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.ControlWorking">
            <summary>
            正在使用的玩家的控制的状态，开始时决定
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.ControlWorkingOld">
            <summary>
            上一次使用的玩家的控制的状态，开始时决定
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.ControlConsidered">
            <summary>
            被考虑的操作
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.ControlConsideredMain">
            <summary>
            被考虑的主要操作，当主要操作被按下时计时，计时结束决定ControlNow
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.ControlDelay">
            <summary>
            按下/松开 到现在的时间
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.ActionsStart">
            <summary>
            在对应操作激活时，传入ControlTimes，返回false阻止激活
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.ActionsUpdate">
            <summary>
            在对应操作运行时，传入ControlDelay，返回true结束操作
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.ActionsEnd">
            <summary>
            在对应操作结束时，传入ControlTimes，返回false阻止结束操作
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.GlobalActionStart">
            <summary>
            先于ActionsStart，传入ControlNow，ControlTimes，返回false阻止ActionsStart和激活
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.GlobalActionUpdate">
            <summary>
            先于ActionsUpdate，传入ControlWorking，ControlDelay，返回true阻止ActionsUpdate和结束操作
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.GlobalActionEnd">
            <summary>
            先于ActionsEnd，传入ControlWorking，ControlTimes，返回false阻止ActionsEnd，和结束操作
            </summary>
        </member>
        <member name="F:XxDefinitions.PlayerControlHelper.NoControlUpdate">
            <summary>
            没有操作时
            </summary>
        </member>
        <member name="M:XxDefinitions.PlayerControlHelper.AddActionStart(System.Int32,System.Func{Terraria.Player,System.Int32,System.Boolean})">
            <summary>
            在对应操作激活时，传入ControlTimes，返回false阻止激活
            </summary>
        </member>
        <member name="M:XxDefinitions.PlayerControlHelper.AddActionUpdate(System.Int32,System.Func{Terraria.Player,System.Int32,System.Boolean})">
            <summary>
            在对应操作运行时，传入ControlDelay，返回true结束操作
            </summary>
        </member>
        <member name="M:XxDefinitions.PlayerControlHelper.AddActionEnd(System.Int32,System.Func{Terraria.Player,System.Int32,System.Boolean})">
            <summary>
            在对应操作结束时，传入ControlTimes，返回false阻止结束操作
            </summary>
        </member>
        <member name="M:XxDefinitions.PlayerControlHelper.Update">
            <summary>
            每帧进行
            </summary>
        </member>
        <member name="M:XxDefinitions.PlayerControlHelper.Reset(Terraria.Player)">
            <summary>
            重置，不会去除Actions，会执行ActionEnd
            </summary>
        </member>
        <member name="M:XxDefinitions.PlayerControlHelper.TryReset(Terraria.Player)">
            <summary>
            尝试重置，如果相同则不重置
            </summary>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjBehaviors.Chase">
            <summary>
            跟踪目标
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.Chase.Target">
            <summary>
            目标位置
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.Chase.SpeedReduce">
            <summary>
            减速比例，每帧执行
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.Chase.MaxSpeed">
            <summary>
            最大速度
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.Chase.Acceleration">
            <summary>
            加速度
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.Chase.Range">
            <summary>
            目标范围半径
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.Chase.MinReduceSpeed">
            <summary>
            最小减速度值，低于该速度不会减速
            </summary>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjBehaviors.CheckMinionActive">
            <summary>
            确定召唤物是否应该活动，包括距离太远瞬移
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.CheckMinionActive.BuffType">
            <summary>
            该召唤物的buff的type
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.CheckMinionActive.TeleportLength">
            <summary>
            与玩家距离太远传送的距离，<![CDATA[<]]>0不传送
            </summary>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget">
            <summary>
            自动设置目标，使用Utils.FindTargetClosest
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget.Target">
            <summary>
            找到的目标
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget.DoUpdate">
            <summary>
            是否进行更新，在间隔期，只会判断目标是否可用，并在不可用时更新
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget.PlayerCanBeTargeted">
            <summary>
            玩家是否可以成为目标
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget.NPCCanBeTargeted">
            <summary>
            NPC是否可以成为目标
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget.PlayerValue">
            <summary>
            玩家的值
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget.NPCValue">
            <summary>
            NPC的值
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget.FindFriendly">
            <summary>
            是否寻找友善生物，包括玩家和友好NPC
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget.FindHostile">
            <summary>
            是否寻找邪恶生物
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget.DefaultValue">
            <summary>
            初始价值，相当于距离
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget.CheckBefore">
            <summary>
            在进行查找之前检查，返回false阻止之后的检查
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget.SetForHostileNPC(System.Func{Terraria.NPC,System.Boolean},System.Func{Terraria.NPC,System.Single})">
            <summary>
            设置为搜索邪恶生物
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget.SetForPlayer(System.Func{Terraria.Player,System.Boolean},System.Func{Terraria.Player,System.Single})">
            <summary>
            设置为搜索玩家
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.CheckTarget.SetForMinionAttackTarget">
            <summary>
            设置优先搜索玩家的MinionAttackTarget
            </summary>
            <returns></returns>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjBehaviors.CopyProjVanillaAI">
            <summary>
            复制VanillaAI
            用 CopyProjVanillaAI.ai 和 CopyProjVanillaAI.localAI（Update时替换与还原projectile.ai ...）
            </summary>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjBehaviors.HangOnNPC">
            <summary>
            保持其在NPC的相对位置上
            在entity无效（!active）时自动暂停
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.HangOnNPC.Offset">
            <summary>
            相对中心的位置
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.HangOnNPC.entity">
            <summary>
            所在的npc
            </summary>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjBehaviors.HangOnProj">
            <summary>
            保持其在Proj的相对位置上
            在entity无效（!active）时自动暂停
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.HangOnProj.Offset">
            <summary>
            相对中心的位置
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.HangOnProj.entity">
            <summary>
            所在的npc
            </summary>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjBehaviors.HoverRotation">
            <summary>
            设置Projectile悬浮时横向移动时的方向
            </summary>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjBehaviors.IModProjBehavior">
            <summary>
            ModProj的行为的接口
            </summary>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1">
            <summary>
            ModProj的行为的基类
            </summary>
            <typeparam name="RealModProjType"></typeparam>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.modProjectile">
            <summary>
            被操作的modProj
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.projectile">
            <summary>
            被操作的projectile
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.#ctor(`0)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.ShouldUpdatePosition">
            <summary>
            Whether or not this projectile should update its position based on factors such as its velocity, whether it is in liquid, etc. Return false to make its velocity have no effect on its position. Returns true by default.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.TileCollideStyle(System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Allows you to determine how this projectile interacts with tiles. Width and height determine the projectile's hitbox for tile collision, and default to -1. Leave them as -1 to use the projectile's real size. Fallthrough determines whether the projectile can fall through platforms, etc., and defaults to true.
            </summary>
            <param name="width">Width of the hitbox.</param>
            <param name="height">Height of the hitbox.</param>
            <param name="fallThrough">If the projectile can fall through platforms etc.</param>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.OnTileCollide(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Allows you to determine what happens when this projectile collides with a tile. OldVelocity is the velocity before tile collision. The velocity that takes tile collision into account can be found with projectile.velocity. Return true to allow the vanilla tile collision code to take place (which normally kills the projectile). Returns true by default.
            </summary>
            <param name="oldVelocity">The velocity of the projectile upon collision.</param>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.CanCutTiles">
            <summary>
            Return true or false to specify if the projectile can cut tiles, like vines. Return null for vanilla decision.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.CutTiles">
            <summary>
            Code ran when the projectile cuts tiles. Only runs if CanCutTiles() returns true. Useful when programming lasers and such.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.PreKill(System.Int32)">
            <summary>
            Allows you to determine whether the vanilla code for Kill and the Kill hook will be called. Return false to stop them from being called. Returns true by default. Note that this does not stop the projectile from dying.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.Kill(System.Int32)">
            <summary>
            Allows you to control what happens when this projectile is killed (for example, creating dust or making sounds). Also useful for creating retrievable ammo. Called on all clients and the server in multiplayer, so be sure to use `if (projectile.owner == Main.myPlayer)` if you are spawning retrievable ammo. (As seen in ExampleJavelinProjectile)
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.CanDamage">
            <summary>
            Whether or not this projectile is capable of killing tiles (such as grass) and damaging NPCs/players. Return false to prevent it from doing any sort of damage. Returns true by default.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.MinionContactDamage">
            <summary>
            Whether or not this minion can damage NPCs by touching them. Returns false by default. Note that this will only be used if this projectile is considered a pet.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.ModifyDamageHitbox(Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            Allows you to change the hitbox used by this projectile for damaging players and NPCs.
            </summary>
            <param name="hitbox"></param>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.CanHitNPC(Terraria.NPC)">
            <summary>
            Allows you to determine whether this projectile can hit the given NPC. Return true to allow hitting the target, return false to block this projectile from hitting the target, and return null to use the vanilla code for whether the target can be hit. Returns null by default.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.ModifyHitNPC(Terraria.NPC,System.Int32@,System.Single@,System.Boolean@,System.Int32@)">
            <summary>
            Allows you to modify the damage, knockback, etc., that this projectile does to an NPC. This method is only called for the owner of the projectile, meaning that in multi-player, projectiles owned by a player call this method on that client, and projectiles owned by the server such as enemy projectiles call this method on the server.
            </summary>
            <param name="target">The target.</param>
            <param name="damage">The modifiable damage.</param>
            <param name="knockback">The modifiable knockback.</param>
            <param name="crit">The modifiable crit.</param>
            <param name="hitDirection">The modifiable hit direction.</param>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.OnHitNPC(Terraria.NPC,System.Int32,System.Single,System.Boolean)">
            <summary>
            Allows you to create special effects when this projectile hits an NPC (for example, inflicting debuffs). This method is only called for the owner of the projectile, meaning that in multi-player, projectiles owned by a player call this method on that client, and projectiles owned by the server such as enemy projectiles call this method on the server.
            </summary>
            <param name="target">The target.</param>
            <param name="damage">The damage.</param>
            <param name="knockback">The knockback.</param>
            <param name="crit">The critical hit.</param>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.CanHitPvp(Terraria.Player)">
            <summary>
            Allows you to determine whether this projectile can hit the given opponent player. Return false to block this projectile from hitting the target. Returns true by default.
            </summary>
            <param name="target">The target</param>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.ModifyHitPvp(Terraria.Player,System.Int32@,System.Boolean@)">
            <summary>
            Allows you to modify the damage, etc., that this projectile does to an opponent player.
            </summary>
            <param name="target">The target.</param>
            <param name="damage">The modifiable damage.</param>
            <param name="crit">The modifiable crit.</param>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.OnHitPvp(Terraria.Player,System.Int32,System.Boolean)">
            <summary>
            Allows you to create special effects when this projectile hits an opponent player.
            </summary>
            <param name="target">The target.</param>
            <param name="damage">The damage.</param>
            <param name="crit">The critical hit.</param>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.CanHitPlayer(Terraria.Player)">
            <summary>
            Allows you to determine whether this hostile projectile can hit the given player. Return false to block this projectile from hitting the target. Returns true by default.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.ModifyHitPlayer(Terraria.Player,System.Int32@,System.Boolean@)">
            <summary>
            Allows you to modify the damage, etc., that this hostile projectile does to a player.
            </summary>
            <param name="target">The target.</param>
            <param name="damage">The modifiable damage.</param>
            <param name="crit">The modifiable crit.</param>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.OnHitPlayer(Terraria.Player,System.Int32,System.Boolean)">
            <summary>
            Allows you to create special effects when this hostile projectile hits a player.
            </summary>
            <param name="target">The target.</param>
            <param name="damage">The damage.</param>
            <param name="crit">The critical hit.</param>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.Colliding(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Allows you to use custom collision detection between this projectile and a player or NPC that this projectile can damage. Useful for things like diagonal lasers, projectiles that leave a trail behind them, etc.
            </summary>
            <param name="projHitbox">The hitbox of the projectile.</param>
            <param name="targetHitbox">The hitbox of the target.</param>
            <returns>Whether they collide or not.</returns>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.GetAlpha(Microsoft.Xna.Framework.Color)">
            <summary>
            Allows you to determine the color and transparency in which this projectile is drawn. Return null to use the default color (normally light and buff color). Returns null by default.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.PreDrawExtras(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Allows you to draw things behind this projectile. Returns false to stop the game from drawing extras textures related to the projectile (for example, the chains for grappling hooks), useful if you're manually drawing the extras. Returns true by default.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.PreDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Color)">
            <summary>
            Allows you to draw things behind this projectile, or to modify the way this projectile is drawn. Return false to stop the game from drawing the projectile (useful if you're manually drawing the projectile). Returns true by default.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.PostDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Color)">
            <summary>
            Allows you to draw things in front of a projectile. This method is called even if PreDraw returns false.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.CanUseGrapple(Terraria.Player)">
            <summary>
            This code is called whenever the player uses a grappling hook that shoots this type of projectile. Use it to change what kind of hook is fired (for example, the Dual Hook does this), to kill old hook projectiles, etc.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.SingleGrappleHook(Terraria.Player)">
            <summary>
            Whether or not a grappling hook can only have one hook per player in the world at a time. Return null to use the vanilla code. Returns null by default.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.UseGrapple(Terraria.Player,System.Int32@)">
            <summary>
            This code is called whenever the player uses a grappling hook that shoots this type of projectile. Use it to change what kind of hook is fired (for example, the Dual Hook does this), to kill old hook projectiles, etc.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.GrappleRange">
            <summary>
            How far away this grappling hook can travel away from its player before it retracts.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.NumGrappleHooks(Terraria.Player,System.Int32@)">
            <summary>
            How many of this type of grappling hook the given player can latch onto blocks before the hooks start disappearing. Change the numHooks parameter to determine this; by default it will be 3.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.GrappleRetreatSpeed(Terraria.Player,System.Single@)">
            <summary>
            The speed at which the grapple retreats back to the player after not hitting anything. Defaults to 11, but vanilla hooks go up to 24.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.GrapplePullSpeed(Terraria.Player,System.Single@)">
            <summary>
            The speed at which the grapple pulls the player after hitting something. Defaults to 11, but the Bat Hook uses 16.
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehavior`1.DrawBehind(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            When used in conjunction with "projectile.hide = true", allows you to specify that this projectile should be drawn behind certain elements. Add the index to one and only one of the lists. For example, the Nebula Arcanum projectile draws behind NPCs and tiles.
            </summary>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehaviorAutomata">
            <summary>
            ModProjectile应用行为自动机的基类
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehaviorAutomata.Kill(System.Int32)">
            <summary>
            会BehaviorSet.Dispose
            </summary>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehaviorComponentAutomata">
            <summary>
            ModProjectile应用行为自动机的基类
            </summary>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjBehaviors.IModProjBehaviorComponent">
            <summary>
            使用组合模式的IModProjBehavior
            </summary>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehaviorComponent`1">
            <summary>
            使用组合模式的ModProjBehavior
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehaviorComponent`1.modProjectile">
            <summary>
            被操作的modProj
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehaviorComponent`1.projectile">
            <summary>
            被操作的projectile
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehaviorComponent`1.#ctor(`0)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjBehaviors.ModProjBehaviorComponent`1.Kill(System.Int32)">
            <summary>
            会this.Dispose
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjExplosion.SummonProjExplosion(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32,System.Boolean)">
            <summary>
            生成爆炸
            </summary>
            <param name="Position">爆炸的位置</param>
            <param name="friendlyDamage">对敌对NPC的伤害</param>
            <param name="hostileDamage">对友好NPC和玩家的伤害</param>
            <param name="radius">爆炸的半径</param>
            <param name="color_">爆炸的颜色</param>
            <param name="Owner">爆炸的所有者</param>
            <param name="npcProj">是否属于npc</param>
            <returns></returns>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjLaser">
            <summary>
            激光
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.Type">
            <summary>
            激光的Type
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.DefDamage">
            <summary>
            激光的默认伤害，用于计算伤害浮动，自动转换
            </summary>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjLaser.SummonProjLaserPlayer(Microsoft.Xna.Framework.Vector2,System.UInt32,System.Single,System.Boolean,System.Single,System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32,System.Int32,System.Int32)">
            <summary>
            生成玩家的激光
            </summary>
            <param name="Pos">激光位置</param>
            <param name="MaxDistance">激光最大距离</param>
            <param name="Rotation">激光角度</param>
            <param name="Collide">激光是否碰撞方块</param>
            <param name="Width">激光的宽度</param>
            <param name="friendlyDamage">对友善生物的伤害</param>
            <param name="hostileDamage">对邪恶生物的伤害</param>
            <param name="color_">颜色</param>
            <param name="Owner">玩家ID</param>
            <param name="timeleft">时间</param>
            <param name="HitCooldown">击中无敌帧</param>
            <returns>ProjLaser</returns>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjLaser.SummonProjLaserNPC(Microsoft.Xna.Framework.Vector2,System.UInt32,System.Single,System.Boolean,System.Single,System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32)">
            <summary>
            生成NPC的激光
            </summary>
            <param name="Pos">激光位置</param>
            <param name="MaxDistance">激光最大距离</param>
            <param name="Rotation">激光角度</param>
            <param name="Collide">激光是否碰撞方块</param>
            <param name="Width">激光的宽度</param>
            <param name="friendlyDamage">对友善生物的伤害</param>
            <param name="hostileDamage">对邪恶生物的伤害</param>
            <param name="color_">颜色</param>
            <param name="timeleft">时间</param>
            <returns>ProjLaser</returns>
        </member>
        <member name="M:XxDefinitions.Projectiles.ProjLaser.SummonProjLaserTrap(Microsoft.Xna.Framework.Vector2,System.UInt32,System.Single,System.Boolean,System.Single,System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32)">
            <summary>
            生成陷阱的激光
            </summary>
            <param name="Pos">激光位置</param>
            <param name="MaxDistance">激光最大距离</param>
            <param name="Rotation">激光角度</param>
            <param name="Collide">激光是否碰撞方块</param>
            <param name="Width">激光的宽度</param>
            <param name="friendlyDamage">对友善生物的伤害</param>
            <param name="hostileDamage">对邪恶生物的伤害</param>
            <param name="color_">颜色</param>
            <param name="timeleft">时间</param>
            <returns>ProjLaser</returns>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.color">
            <summary>
            激光的颜色
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.Distance">
            <summary>
            激光的长度
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.Rotation">
            <summary>
            激光的方向
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.LaserVel">
            <summary>
            激光的方向和长度
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.FriendlyDamage">
            <summary>
            对玩家和友好NPC的伤害
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.HostileDamage">
            <summary>
            对敌人的伤害
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.Collide">
            <summary>
            是否计算碰撞方块
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.MaxDistance">
            <summary>
            激光的最大长度，不超过8192（否则循环）
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.HitCooldown">
            <summary>
            击中NPC的无敌帧
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.drawWidth">
            <summary>
            激光绘图的宽度
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.DrawWidth">
            <summary>
            激光绘图的宽度
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.Width">
            <summary>
            激光的宽度（使用默认的）
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.Head">
            <summary>
            绘图的头（结束的位置）
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.Tail">
            <summary>
            绘图的尾（开始的位置）
            </summary>
        </member>
        <member name="P:XxDefinitions.Projectiles.ProjLaser.Body">
            <summary>
            绘图的中间
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.Pos">
            <summary>
            位置，如果存在，自动设置，否则保持原来的位置
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.rotation">
            <summary>
            角度，如果存在，自动设置
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.distance">
            <summary>
            距离，如果存在，自动设置，否则计算
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.OnHitNPCEffect">
            <summary>
            击中NPC的效果
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.OnHitPlayerEffect">
            <summary>
            击中Player的效果
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.ai">
            <summary>
            计算前执行，返回false终止
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.StartTime">
            <summary>
            从生成开始的时间
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.StartTimeMax">
            <summary>
            开始的时间，用于激光开始变粗（碰撞箱不变）
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.EndTimeMax">
            <summary>
            结束的时间，用于激光开始变细（碰撞箱不变）
            </summary>
        </member>
        <member name="T:XxDefinitions.Projectiles.ProjLaser.DrawFunc">
            <summary>
            在画对应部分前的的操作，返回false终止操作
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.DrawBody">
            <summary>
            画身体之前
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.DrawTail">
            <summary>
            画尾之前
            </summary>
        </member>
        <member name="F:XxDefinitions.Projectiles.ProjLaser.DrawHead">
            <summary>
            画头之前
            </summary>
        </member>
        <member name="T:XxDefinitions.SetNPCFallThroughPlatforms">
            <summary>
            设置NPC从平台下落的条件，一true即true，包含原版方法
            </summary>
        </member>
        <member name="M:XxDefinitions.SetNPCFallThroughPlatforms.Add(System.Func{Terraria.NPC,System.Boolean})">
            <summary>
            设置全局方法
            </summary>
        </member>
        <member name="M:XxDefinitions.SetNPCFallThroughPlatforms.Add(System.Int32,System.Func{Terraria.NPC,System.Boolean})">
            <summary>
            设置对该type的npc的方法
            </summary>
        </member>
        <member name="M:XxDefinitions.SetNPCFallThroughPlatforms.FallIfTargetPlayerHigher(Terraria.NPC)">
            <summary>
            如果目标玩家的顶部比自己的底部低
            </summary>
        </member>
        <member name="M:XxDefinitions.SetNPCFallThroughPlatforms.FallIfTargetNPCHigher(Terraria.NPC)">
            <summary>
            如果目标NPC的顶部比自己的底部低
            </summary>
        </member>
        <member name="T:XxDefinitions.StaticRefWithNew`1">
            <summary><![CDATA[
            通过一个弱引用和一个列表引用完成可以在XxDefinitions.Unload自动释放的引用
            通过new T()创建对象
            在内存中剩下一个WeakReference<T>]]>
            </summary>
        </member>
        <member name="T:XxDefinitions.CtorByF`1">
            <summary>
            在使用时自动用F()创建对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:XxDefinitions.StaticRefWithFunc`1">
            <summary><![CDATA[
            通过一个弱引用和一个列表引用完成可以在XxDefinitions.Unload自动释放的引用
            通过CtorF创建对象
            在内存中剩下一个WeakReference<T>和委派构造函数]]>
            </summary>
        </member>
        <member name="T:XxDefinitions.SubstepEnum">
            <summary>
            分步枚举，每次枚举一部分，共subtime次
            </summary>
        </member>
        <member name="M:XxDefinitions.SubstepEnum.Reset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:XxDefinitions.SubstepEnum.Reset(System.Int32,System.Int32)">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:XxDefinitions.SubstepEnum.ReCalculate">
            <summary>
            重新计算，同时重置
            </summary>
        </member>
        <member name="M:XxDefinitions.SubstepEnum.#ctor(System.Int32,System.Int32)">
            <summary>
            枚举[0,Length)，1，分Subtime次
            </summary>
        </member>
        <member name="M:XxDefinitions.SubstepEnum.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            枚举[Left,Right)，间隔Step，分Subtime次
            </summary>
        </member>
        <member name="P:XxDefinitions.SubstepEnum.EnumTime">
            <summary>
            本次枚举的次数
            </summary>
        </member>
        <member name="M:XxDefinitions.SubstepEnum.Enum">
            <summary>
            枚举区间
            </summary>
        </member>
        <member name="M:XxDefinitions.SubstepEnum.Next">
            <summary>
            移动到下一个区间，如果到头，重置并返回true
            </summary>
        </member>
        <member name="P:XxDefinitions.SubstepEnum.IsBeginning">
            <summary>
            是否在开头
            </summary>
        </member>
        <member name="P:XxDefinitions.SubstepEnum.EnumedTime">
            <summary>
            已经进行的枚举次数
            </summary>
        </member>
        <member name="M:XxDefinitions.SubstepEnum.GetEnumerator">
            <summary>
            枚举区间并移动
            </summary>
        </member>
        <member name="M:XxDefinitions.SubstepEnum.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举区间并移动
            </summary>
        </member>
        <member name="T:XxDefinitions.Texture2DCutted">
            <summary>
            截取的Texture2D
            </summary>
        </member>
        <member name="F:XxDefinitions.Texture2DCutted.texture">
            <summary>
            被截取的Texture2D
            </summary>
        </member>
        <member name="F:XxDefinitions.Texture2DCutted.rectangle">
            <summary>
            截取的区域
            </summary>
        </member>
        <member name="F:XxDefinitions.Texture2DCutted.origin">
            <summary>
            中心位置
            </summary>
        </member>
        <member name="F:XxDefinitions.Texture2DCutted.Rotation">
            <summary>
            旋转，建议直角
            </summary>
        </member>
        <member name="F:XxDefinitions.Texture2DCutted.Scale">
            <summary>
            放缩
            </summary>
        </member>
        <member name="F:XxDefinitions.Texture2DCutted.color">
            <summary>
            颜色
            </summary>
        </member>
        <member name="M:XxDefinitions.Texture2DCutted.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            截取Texture2D
            </summary>
            <param name="texture">被截取的Texture2D</param>
            <param name="rectangle">截取的区域</param>
            <param name="origin">中心位置</param>
            <param name="Rotation">旋转，建议直角</param>
            <param name="Scale">放缩</param>
            <param name="color"></param>
        </member>
        <member name="M:XxDefinitions.Texture2DCutted.#ctor(XxDefinitions.Texture2DCutted)">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:XxDefinitions.Texture2DCutted.Clone">
            <summary>
            复制
            </summary>
        </member>
        <member name="M:XxDefinitions.Texture2DCutted.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            替代SpriteBatch中的对应参数绘图
            </summary>
        </member>
        <member name="M:XxDefinitions.Texture2DCutted.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            替代SpriteBatch中的对应参数绘图，scale只有在贴图是直角旋转时有效，使用RealScale()
            </summary>
        </member>
        <member name="M:XxDefinitions.Texture2DCutted.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            替代SpriteBatch中的对应参数绘图
            </summary>
        </member>
        <member name="M:XxDefinitions.Texture2DCutted.RealScale(Microsoft.Xna.Framework.Vector2)">
            <summary>
            实际放缩，只有在贴图是直角旋转时正常，否则返回(或许是)近似值
            </summary>
        </member>
        <member name="M:XxDefinitions.Texture2DCutted.RealSize">
            <summary>
            实际长，只有在贴图是直角旋转时正常，否则返回(或许是)近似值
            </summary>
        </member>
        <member name="M:XxDefinitions.Texture2DCutted.Set(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            设置
            </summary>
        </member>
        <member name="T:XxDefinitions.UIElements.UIDrag">
            <summary>
            操作可拖动UI
            uI.Append(uIDrag);
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UIDrag.Offset">
            <summary>
            相对位置
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UIDrag.Dragging">
            <summary>
            是否正在拖动
            </summary>
        </member>
        <member name="P:XxDefinitions.UIElements.UIDrag.Active">
            <summary>
            是否启用，不受Activate影响
            </summary>
        </member>
        <member name="P:XxDefinitions.UIElements.UIDrag.LeftMouse">
            <summary>
            是否启用左键
            </summary>
        </member>
        <member name="P:XxDefinitions.UIElements.UIDrag.RightMouse">
            <summary>
            是否启用右键
            </summary>
        </member>
        <member name="P:XxDefinitions.UIElements.UIDrag.MiddleMouse">
            <summary>
            是否启用中键
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UIDrag.ThroughElements">
            <summary>
            即使按到这些元素也启用拖拽
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UIDrag.ThroughAll">
            <summary>
            无论按到哪些元素都启用拖拽
            </summary>
        </member>
        <member name="M:XxDefinitions.UIElements.UIDrag.SetRightDrag(Terraria.UI.UIElement)">
            <summary>
            为uI生成UIDrag 穿透右键移动
            </summary>
            <param name="uI"></param>
        </member>
        <member name="M:XxDefinitions.UIElements.UIDrag.SetMiddleDrag(Terraria.UI.UIElement)">
            <summary>
            为uI生成UIDrag 穿透中键移动
            </summary>
            <param name="uI"></param>
        </member>
        <member name="T:XxDefinitions.UIElements.UIImageBottomEX">
            <summary>
            带图的按钮
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UIImageBottomEX.texture">
            <summary>
            按钮的图像，自动放缩
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UIImageBottomEX.hoverString">
            <summary>
            鼠标悬浮时的显示字符串
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UIImageBottomEX.visibilityActive">
            <summary>
            鼠标悬浮时透明度
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UIImageBottomEX.visibilityInactive">
            <summary>
            不活跃（鼠标没有悬浮时）时透明度
            </summary>
        </member>
        <member name="T:XxDefinitions.UIElements.UISwitch">
            <summary>
            开关
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UISwitch.BottomTexture">
            <summary>
            开关图形
            </summary>
        </member>
        <member name="P:XxDefinitions.UIElements.UISwitch.BottomTexture0">
            <summary>
            开关图形
            </summary>
        </member>
        <member name="P:XxDefinitions.UIElements.UISwitch.BottomTexture1">
            <summary>
            开关图形
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UISwitch.value">
            <summary>
            被控制的值的IGetSetValue
            </summary>
        </member>
        <member name="P:XxDefinitions.UIElements.UISwitch.Value">
            <summary>
            被控制的值
            </summary>
        </member>
        <member name="M:XxDefinitions.UIElements.UISwitch.#ctor(XxDefinitions.IGetSetValue{System.Boolean},XxDefinitions.IGetValue{System.String})">
            <summary>
            
            </summary>
        </member>
        <member name="M:XxDefinitions.UIElements.UISwitch.SetCenter(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            设置开关中心
            </summary>
        </member>
        <member name="M:XxDefinitions.UIElements.UISwitch.Click(Terraria.UI.UIMouseEvent)">
            <summary>
            按下
            </summary>
        </member>
        <member name="T:XxDefinitions.UIElements.UILeftNamedSwitch">
            <summary>
            在文本右边显示开关
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UILeftNamedSwitch.Switch">
            <summary>
            开关
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UILeftNamedSwitch.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UILeftNamedSwitch.Name">
            <summary>
            名字
            </summary>
        </member>
        <member name="T:XxDefinitions.UIElements.UIRightNamedSwitch">
            <summary>
            在文本右边显示开关
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UIRightNamedSwitch.Switch">
            <summary>
            开关
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UIRightNamedSwitch.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:XxDefinitions.UIElements.UIRightNamedSwitch.Name">
            <summary>
            名字
            </summary>
        </member>
        <member name="T:XxDefinitions.UnifiedTarget">
            <summary><code><![CDATA[
            用short表示玩家,NPC,Projectile,或无
            值data
            [1,256) player的ID-1
            [301,501) npc的ID+301
            [600,1600) projectile的ID-600
            0 null
            ]]></code>
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.Check">
            <summary>
            确认
            </summary>
        </member>
        <member name="F:XxDefinitions.UnifiedTarget.data">
            <summary>
            目标的值
            </summary>
        </member>
        <member name="P:XxDefinitions.UnifiedTarget.IsNPC">
            <summary>
            目标是否为npc
            </summary>
        </member>
        <member name="P:XxDefinitions.UnifiedTarget.IsPlayer">
            <summary>
            目标是否为player
            </summary>
        </member>
        <member name="P:XxDefinitions.UnifiedTarget.IsNull">
            <summary>
            目标是否为空
            </summary>
        </member>
        <member name="P:XxDefinitions.UnifiedTarget.IsProj">
            <summary>
            目标是否为Proj
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.GetNPC">
            <summary>
            获取所表示的NPC
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.GetPlayer">
            <summary>
            获取所表示的player
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.GetProj">
            <summary>
            获取所表示的Proj
            </summary>
        </member>
        <member name="P:XxDefinitions.UnifiedTarget.npc">
            <summary>
            所表示的NPC
            </summary>
        </member>
        <member name="P:XxDefinitions.UnifiedTarget.player">
            <summary>
            所表示的player
            </summary>
        </member>
        <member name="P:XxDefinitions.UnifiedTarget.projectile">
            <summary>
            所表示的proj
            </summary>
        </member>
        <member name="P:XxDefinitions.UnifiedTarget.NPCID">
            <summary>
            所表示的npc的id
            </summary>
        </member>
        <member name="P:XxDefinitions.UnifiedTarget.PlayerID">
            <summary>
            所表示的player的id
            </summary>
        </member>
        <member name="P:XxDefinitions.UnifiedTarget.ProjID">
            <summary>
            所表示的projectile的id
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.WriteBinary(System.IO.BinaryWriter,XxDefinitions.UnifiedTarget)">
            <summary>
            将UnifiedTarget写入流
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.ReadBinary(System.IO.BinaryReader)">
            <summary>
            从流读取UnifiedTarget
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.MakeNPC(System.Int32)">
            <summary>
            生成对应NPC的UnifiedTarget
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.MakePlayer(System.Int32)">
            <summary>
            生成对应player的UnifiedTarget
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.MakeProj(System.Int32)">
            <summary>
            生成对应proj的UnifiedTarget
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.MakeNPCTarget(Terraria.NPC)">
            <summary>
            生成对应npc.target的UnifiedTarget
            </summary>
        </member>
        <member name="P:XxDefinitions.UnifiedTarget.Null">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.MakeNPC(Terraria.NPC)">
            <summary>
            生成对应NPC的id的UnifiedTarget
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.MakePlayer(Terraria.Player)">
            <summary>
            生成对应player的id的UnifiedTarget
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.MakeProj(Terraria.Projectile)">
            <summary>
            生成对应proj的id的UnifiedTarget
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.Make(Terraria.NPC)">
            <summary>
            生成对应NPC的id的UnifiedTarget
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.Make(Terraria.Player)">
            <summary>
            生成对应player的id的UnifiedTarget
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.Make(Terraria.Projectile)">
            <summary>
            生成对应proj的id的UnifiedTarget
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.Make">
            <summary>
            生成空对象
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.MakeNPCTarget(System.Int32)">
            <summary>
            生成对应npc.target的UnifiedTarget
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.Set(Terraria.NPC)">
            <summary>
            设置表示npc
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.Set(Terraria.Player)">
            <summary>
            设置表示player
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.Set(Terraria.Projectile)">
            <summary>
            设置表示proj
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.SetNPC(System.Int32)">
            <summary>
            设置表示npc
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.SetPlayer(System.Int32)">
            <summary>
            设置表示player
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.SetProj(System.Int32)">
            <summary>
            设置表示proj
            </summary>
        </member>
        <member name="P:XxDefinitions.UnifiedTarget.NPCTarget">
            <summary>
            与npc.target对应
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.SetNPCTarget(Terraria.NPC)">
            <summary>
            设置表示npc.target
            </summary>
        </member>
        <member name="M:XxDefinitions.UnifiedTarget.SetNPCTarget(System.Int32)">
            <summary>
            设置表示npc.target
            </summary>
        </member>
        <member name="P:XxDefinitions.UnifiedTarget.entity">
            <summary>
            对应的Entity
            </summary>
        </member>
        <member name="T:XxDefinitions.UnifiedTarget2">
            <summary><code><![CDATA[
            用short表示玩家或NPC,或无
            值data
            >0:data-1 为NPC的ID
            <0:data+1 为Player的ID
            ==0:为空
            ]]></code>
            </summary>
        </member>
        <member name="T:XxDefinitions.UnloadDo">
            <summary>
            在Unload时自动执行
            </summary>
        </member>
        <member name="M:XxDefinitions.UnloadDo.Add(System.Action)">
            <summary>
            加入方法
            </summary>
        </member>
        <member name="T:XxDefinitions.Utils">
            <summary>
            方法
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.SpriteBatchUsingEffect(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            启用Effect(Immediate)
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.SpriteBatchEndUsingEffect(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            结束启用Effect(Deferred)
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.NextGaussian(Terraria.Utilities.UnifiedRandom)">
            <summary>
            获取符合正态分布的随机数
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.NextGaussian(Terraria.Utilities.UnifiedRandom,System.Double,System.Double)">
            <summary>
            获取符合正态分布的随机数
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.SetLeft(Microsoft.Xna.Framework.Rectangle,System.Int32)">
            <summary>
            在其他边不变的情况下设置左边界
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.SetRight(Microsoft.Xna.Framework.Rectangle,System.Int32)">
            <summary>
            在其他边不变的情况下设置右边界
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.SetTop(Microsoft.Xna.Framework.Rectangle,System.Int32)">
            <summary>
            在其他边不变的情况下设置上边界
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.SetBottom(Microsoft.Xna.Framework.Rectangle,System.Int32)">
            <summary>
            在其他边不变的情况下设置下边界
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.SetLT(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point)">
            <summary>
            设置左上角
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.SetRB(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point)">
            <summary>
            设置右下角
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.MoveBy(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point)">
            <summary>
            移动rect
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.NPCCanUse(Terraria.NPC)">
            <summary>
            判断npc是否活动
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.PlayerCanUse(Terraria.Player)">
            <summary>
            判断player是否活动
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.NPCCanFind(Terraria.NPC)">
            <summary>
            判断npc是否可以追踪
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.NPCCanFindNoTile(Terraria.NPC,Microsoft.Xna.Framework.Vector2)">
            <summary>
            判断npc是否可以追踪，避开Tile
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.PlayerCanFind(Terraria.Player)">
            <summary>
            判断玩家是否可以追踪
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.PlayerCanFindNoTile(Terraria.Player,Microsoft.Xna.Framework.Vector2)">
            <summary>
            判断npc是否可以追踪，避开Tile
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.Limit(System.Int32,System.Int32,System.Int32)">
            <summary>
            将n限制在[l,r]
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.LimitLoop(System.Int32,System.Int32,System.Int32)">
            <summary>
            返回n在[l,r)中循环的结果
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.LimitLoop(System.Double,System.Double,System.Double)">
            <summary>
            返回n在[l,r)中循环的结果
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.LimitLoop(System.Single,System.Single,System.Single)">
            <summary>
            返回n在[l,r)中循环的结果
            </summary>
        </member>
        <member name="T:XxDefinitions.Utils.CalculateUtils">
            <summary>
            用于计算的方法
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.SlowlyDecreaseLim1To0(System.Double)">
            <summary>
            获取一个随n缓慢减小的值,从1到0
            <code>Sqrt(n + 1) - Sqrt(n)</code>
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.SlowlyDecreaseLim1To0(System.Double,System.Double)">
            <summary>
            获取一个随n缓慢减小的值,从1到0,SpeedParameter绝定该函数增长的速度。SpeedParameter越小，减小越慢。SpeedParameter应大于1
            <code>Math.Pow(n+1, 1 / SpeedParameter) - Math.Pow(n, 1 / SpeedParameter)</code>
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.SlowlyIncreaseLim0To1(System.Double)">
            <summary>
            用SlowlyDecreaseLim1To0获取一个随n缓慢增长的值,从0到1
            <code>1-SlowlyDecreaseLim1To0(n)</code>
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.SlowlyIncreaseLim(System.Double,System.Double,System.Double)">
            <summary>
            用SlowlyIncreaseLim0To1获取一个随n缓慢增长的值,从l到r
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.SlowlyIncreaseRaw(System.Double,System.Double)">
            <summary><![CDATA[
            SlowlyIncrease 的原始函数
            获取一个增长的值，n为参数，SpeedParameter绝定该函数增长的速度。SpeedParameter越大，增长越慢。
            SpeedParameter>e时会比log(n+1)小，SpeedParameter<1时比n大]]>
            <code>Exp(Pow(Ln(n+1), 1 / SpeedParameter));</code>
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.SlowlyIncrease(System.Double,System.Double)">
            <summary>
            获取一个缓慢增长的值，n为参数，SpeedParameter绝定该函数增长的速度。SpeedParameter越大，增长越慢。比log(n+1)大。SpeedParameter应大于0
            <code>Exp(Pow(Ln(n+1), 1/SlowlyIncreaseLim(SpeedParameter,1,E)));</code>
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.FastlyIncreaseToInf(System.Double)">
            <summary>
            获取一个快速增长的值，在n取1时达到正无穷，n为参数
            <code>Tan(n*PI/2)</code>
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.GetNearestPoint(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取 在Box中 到Point最近的点，可用于判断碰撞
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.GetFarestPoint(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取 在Box中 到Point最远的点，可用于判断碰撞
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.CheckPointInCircle(Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            判断点是否在圆内
            </summary>
            <param name="Pos">圆心</param>
            <param name="R">半径</param>
            <param name="Point">目标点</param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.CheckAABBvCircleColliding(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            判断Box与 Pos为圆心，R为半径的圆 是否碰撞
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.CheckAABBvAnnulusColliding(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            判断Box与 Pos为圆心，半径MinR到MaxR的圆环 是否碰撞
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.CrossProduct(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            计算二维向量叉乘的长
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.PredictWithVel(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            根据相对位置，相对速度，固定发射速度进行预判
            </summary>
            <param name="OffsetPos">相对位置</param>
            <param name="OffsetVel">相对速度</param>
            <param name="Speed">固定发射速度</param>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.PredictWithVelDirect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            预判，返回速度，如果没有，返回Vector2.Normalize(OffsetVel) * Speed)
            </summary>
            <param name="OffsetPos"></param>
            <param name="OffsetVel"></param>
            <param name="Speed"></param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.NPCFindValue(Terraria.NPC,Microsoft.Xna.Framework.Vector2)">
            <summary>
            以npc与Pos的距离为价值
            <code>(npc.Center - Pos).Length() - npc.Size.Length()</code>
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.PlayerFindValue(Terraria.Player,Microsoft.Xna.Framework.Vector2)">
            <summary>
            以player与Pos的距离为价值
            <code>(player.Center - Pos).Length() - player.Size.Length()</code>
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.FindTargetClosest(Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean,System.Boolean,System.Func{Terraria.NPC,System.Boolean},System.Func{Terraria.Player,System.Boolean},System.Func{Terraria.NPC,System.Single},System.Func{Terraria.Player,System.Single})">
            <summary>
            根据价值搜索目标，找到价值最低的目标
            </summary>
            <param name="Pos">搜索位置</param>
            <param name="DefValue">初始价值</param>
            <param name="FindFriendly">将player和友好的npc作为可选目标</param>
            <param name="FindHostile">将敌对的npc作为可选目标</param>
            <param name="NPCCanFindFunc">确认npc可以作为目标</param>
            <param name="PlayerCanFindFunc">确认player可以作为目标</param>
            <param name="NPCFindValueFunc">npc的价值，默认NPCFindValue</param>
            <param name="PlayerFindValueFunc">player的价值，默认PlayerFindValue</param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.WeightedChoose(System.Int32,System.Int32[])">
            <summary>
            加权选择
            </summary>
            <returns>
            返回选中的第几项
            返回-1表示I超过权的和</returns>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.CanHitLineDistance(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean)">
            <summary>
            计算以origin为起始点，向direction方向移动，直到碰到方块或到达最远距离的距离，不考虑斜方块和半砖
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.CanHitLineDistancePerfect(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean)">
            <summary>
            计算以origin为起始点，向direction方向移动，直到碰到方块或到达最远距离的距离，考虑斜方块和半砖
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.LineCollitionDistance(System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            线1 过原点，方向Direction1 与 线2 过Point2 ，方向Direction2 交点到原点的距离（反向为负）
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.LineCollitionDistance(Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            线1 过Point1，方向Direction1 与 线2 过Point2 ，方向Direction2 交点到Point1的距离（反向为负）
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.LineCollitionDistance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            线1 Point1a，Point1b 与 线2 Point2a ，Point2b 交点到Point1a的距离（反向为负）
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.TileCollisionPerfect(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            计算碰撞箱以Velocity速度移动，碰撞后最终速度
            </summary>
            <param name="rect"></param>
            <param name="Velocity"></param>
            <param name="StopWhenHit">是否在碰到物块时结束计算</param>
            <param name="fallThrough">是否穿过平台</param>
            <param name="fall2">在Velocity.Y>1时穿过平台</param>
            <param name="gravDir"></param>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.UpdateWornPositionNPC(Terraria.NPC,System.Func{Terraria.NPC,Terraria.NPC},System.Func{Terraria.NPC,System.Boolean},System.Single,System.Single)">
            <summary>
            对蠕虫的头执行，加载全身，需要npc最后的速度
            </summary>
            <param name="npc">头</param>
            <param name="Nextnpc">下一个npc</param>
            <param name="End">是否结束</param>
            <param name="projLength">体节的长度，应比npc的长度稍小</param>
            <param name="AngleAmount">体节转向角度缩小比例</param>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.UpdateWornPositionNPC(Terraria.NPC,System.Func{Terraria.NPC,Terraria.NPC},System.Func{Terraria.NPC,System.Boolean},System.Single)">
            <summary>
            对蠕虫的头执行，加载全身，需要npc最后的速度
            </summary>
            <param name="npc">头</param>
            <param name="Nextnpc">下一个npc</param>
            <param name="End">是否结束</param>
            <param name="projLength">体节的长度，应比npc的长度稍小</param>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.UpdateWornPositionProj(Terraria.Projectile,System.Func{Terraria.Projectile,Terraria.Projectile},System.Func{Terraria.Projectile,System.Boolean},System.Single,System.Single)">
            <summary>
            对蠕虫的头执行，加载全身，需要projectile最后的速度
            </summary>
            <param name="projectile">头</param>
            <param name="NextProj">下一个proj</param>
            <param name="End">是否结束</param>
            <param name="projLength">体节的长度，应比proj的长度稍小</param>
            <param name="AngleAmount">体节转向角度缩小比例</param>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.UpdateWornPositionProj(Terraria.Projectile,System.Func{Terraria.Projectile,Terraria.Projectile},System.Func{Terraria.Projectile,System.Boolean},System.Single)">
            <summary>
            对蠕虫的头执行，加载全身，需要projectile最后的速度
            </summary>
            <param name="projectile">头</param>
            <param name="NextProj">下一个proj</param>
            <param name="End">是否结束</param>
            <param name="projLength">体节的长度，应比proj的长度稍小</param>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.AngleCos(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取两个向量的夹角的cos值
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.Angle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取两个向量的夹角
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.EnumTilesInLine(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            枚举线上的物块
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.EnumTileYLRInLine(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            枚举线上的物块，从上往下返回每层的区间范围
            </summary>
            <returns>(纵坐标，横坐标左端，横坐标右端)</returns>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.EnumTilesInWideLine(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            枚举有宽度的线上的物块，从上往下
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.EnumTilesInConvexPolygon(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            枚举多边形内的物块，从上往下
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.PointAboveLine(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            确定点是否在线的上方（世界上线的下方）
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.PointAboveLine(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            确定点是否在线的上方（世界上线的下方）
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.EnumTilesInRect(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            枚举被Rect接触的物块Point
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.CalculateUtils.EnumTilesInCircle(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            枚举圆上的物块
            </summary>
        </member>
        <member name="T:XxDefinitions.Utils.SummonUtils">
            <summary>
            生成方法
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.SummonUtils.SummonProjExplosion(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32,System.Boolean)">
            <summary>
            生成作为弹幕的爆炸
            </summary>
            <param name="Position">爆炸位置</param>
            <param name="radius">爆炸半径</param>
            <param name="friendlyDamage">对hostile的npc的伤害</param>
            <param name="hostileDamage">对player和友好npc的伤害</param>
            <param name="color_">爆炸颜色</param>
            <param name="Owner">弹幕的所有者</param>
            <param name="npcProj">弹幕是否为npc的弹幕，注意npc的弹幕的所有者为Main.myplayer</param>
            <returns>爆炸弹幕的id</returns>
        </member>
        <member name="M:XxDefinitions.Utils.SummonUtils.SummonProjExplosionTrap(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            生成作为弹幕，陷阱的爆炸
            </summary>
            <param name="Position">爆炸位置</param>
            <param name="radius">爆炸半径</param>
            <param name="friendlyDamage">对hostile的npc的伤害</param>
            <param name="hostileDamage">对player和友好npc的伤害</param>
            <param name="color_">爆炸颜色</param>
            <returns>爆炸弹幕的id</returns>
        </member>
        <member name="M:XxDefinitions.Utils.SummonUtils.SummonDustExplosion(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Action{Terraria.Dust},System.Func{Terraria.Player,Terraria.DataStructures.PlayerDeathReason})">
            <summary>
            对半径中的对象造成伤害，并产生粒子
            </summary>
            <param name="Position">爆炸位置</param>
            <param name="radius">爆炸半径</param>
            <param name="friendlyDamage">对hostile的npc的伤害</param>
            <param name="hostileDamage">对player和友好npc的伤害</param>
            <param name="DustType">粒子类型</param>
            <param name="DustCircleNumber">粒子在爆炸圆中的数量</param>
            <param name="DustSpreadNumber">粒子在中心扩散的数量</param>
            <param name="DustSpeed">扩散的粒子的速度</param>
            <param name="DustDo">对每个生成的粒子的操作</param>
            <param name="MakeDeathReason">杀死玩家的原因，默认为 player.name + " " + Language.GetTextValue("Mods.XxDefinitions.KilledBySummonDustExplosion") </param>
        </member>
        <member name="M:XxDefinitions.Utils.IsTrue(System.Nullable{System.Boolean})">
            <summary>
            如果value有值且为真
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.IsDef``1(``0)">
            <summary>
            判断是否为默认值
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.IsNull(System.Object)">
            <summary>
            判断是否为空
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.InRange(System.Single,System.Single,System.Single)">
            <summary>
            在范围内
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.InRange(System.Double,System.Double,System.Double)">
            <summary>
            在范围内
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.ToGetDelegate``1(XxDefinitions.IGetValue{``0})">
            <summary><![CDATA[
            从IGetValue<T>到Func<T>]]>
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.ToSetDelegate``1(XxDefinitions.ISetValue{``0})">
            <summary><![CDATA[
            从ISetValue<T>到Action<T>]]>
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.ToGet``1(System.Func{``0})">
            <summary><![CDATA[
            从Func<T>到IGetValue<T>]]>
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.ToSet``1(System.Action{``0})">
            <summary><![CDATA[
            从Action<T>到ISetValue<T>]]>
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.Combine``1(XxDefinitions.IGetValue{``0},XxDefinitions.ISetValue{``0})">
            <summary>
            将Get和Set结合成Ref
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.Combine``1(XxDefinitions.ISetValue{``0},XxDefinitions.IGetValue{``0})">
            <summary>
            将Get和Set结合成Ref
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.GetPlayerCenter(System.Int32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取Player的位置的IGetValue
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.GetPlayerCenter(Terraria.Player,Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取Player的位置的IGetValue
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.GetNPCCenter(System.Int32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取NPC的位置的IGetValue
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.GetNPCCenter(Terraria.NPC,Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取NPC的位置的IGetValue
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.GetProjCenter(System.Int32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取Proj的位置的IGetValue
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.GetProjCenter(Terraria.Projectile,Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取Proj的位置的IGetValue
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.GetNPCTargetCenter(System.Int32,XxDefinitions.IGetValue{Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取NPC的目标位置的IGetValue
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.GetNPCTargetCenter(Terraria.NPC,XxDefinitions.IGetValue{Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取NPC的目标位置的IGetValue
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.GetEntityCenter(Terraria.Entity,Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取entity的位置的IGetValue
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.GetNPCTargetCenter(XxDefinitions.UnifiedTarget,XxDefinitions.IGetValue{Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Vector2)">
            <summary>
            获取目标位置的IGetValue
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.GetNPCTarget(Terraria.NPC)">
            <summary>
            获取表示NPC的目标的UnifiedTarget
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.GetNPCTarget(System.Int32)">
            <summary>
            获取表示NPC的目标的UnifiedTarget
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.SetLength(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            设置Vector2的长度
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.SetInWorld(Terraria.Entity)">
            <summary>
            保持entity在世界中（否则会直接被active=false或报错）
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:XxDefinitions.Utils.OffsetToWorld(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32)">
            <summary>
            从相对位置到世界位置
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.OffsetToWorld(Microsoft.Xna.Framework.Vector2,Terraria.NPC)">
            <summary>
            从相对entity的中心的位置到世界位置
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.OffsetToWorld(Microsoft.Xna.Framework.Vector2,Terraria.Projectile)">
            <summary>
            从相对entity的中心的位置到世界位置
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.EnumPairs``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            遍历枚举全部相邻两元素组成的二元组，包括尾和首
            每个元素都会出现两次
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.DrawLaser(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,XxDefinitions.Texture2DCutted,XxDefinitions.Texture2DCutted,XxDefinitions.Texture2DCutted,System.Func{Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2,System.Boolean},System.Func{Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2,System.Boolean},System.Func{Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2,System.Boolean})">
            <summary>
            画激光
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.controlUseItemRight2(Terraria.Player)">
            <summary>
            玩家是否在使用对物品的右键
            </summary>
        </member>
        <member name="M:XxDefinitions.Utils.controlUseItemRight(Terraria.Player)">
            <summary>
            玩家是否在使用对物品的右键
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.AnnouncedXDebugger">
            <summary>
            声明一个公开的XDebugger给其他人使用
            <code><![CDATA[
            [AnnouncedXDebugger("T.a")]
            class T:Mod{}
            ]]></code>
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.AnnouncedXDebugger.XDebuggerFullName">
            <summary>
            使用的XDebugger的全名
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.AnnouncedXDebugger.tryGetXDebugger">
            <summary>
            尝试获取XDebugger
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.AnnouncedXDebugger.#ctor(System.String)">
            <summary>
            声明一个公开的XDebugger给其他人使用
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.AnnounceAttribute">
            <summary>
            表示该XDebugger是公用的，该XDebugger可以在AnnouncedDebuggers.Value中找到
            可以在XDebuggerHelper(Mod)中开关
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.Commands.ShowNPCDebugInfoCommand">
            <summary>
            使用ShowNPCDebugInfo
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.ModNPCInfoString">
            <summary>
            ModNPC信息，<![CDATA[Action<List<(string,string)>>]]>
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.GlobalNPCInfoString">
            <summary>
            GlobalNPC信息，<![CDATA[Action<Terraria.NPC,List<(string,string)>>]]>
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.ModNPCInfoDraw">
            <summary>
            ModNPC绘图，<![CDATA[Func<SpriteBatch,bool>，返回false阻止显示InfoString]]>
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.GlobalNPCInfoDraw">
            <summary>
            GlobalNPC绘图，<![CDATA[Func<NPC,SpriteBatch,bool>，返回false阻止显示InfoString]]>
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.ModProjInfoString">
            <summary>
            ModProjectile信息，<![CDATA[Action<List<(string,string)>>]]>
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.GlobalProjInfoString">
            <summary>
            GlobalProjectile信息，<![CDATA[Action<Projectile,List<(string,string)>>]]>
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.ModProjInfoDraw">
            <summary>
            ModProjectile绘图，<![CDATA[Func<Projectile,SpriteBatch, bool>]]>
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.GlobalProjInfoDraw">
            <summary>
            GlobalProjectile绘图，<![CDATA[Func<Projectile,SpriteBatch, bool>]]>
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.NPCStringData">
            <summary>
            未测试
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.ShowNPCDebugInfo">
            <summary><![CDATA[
            用于显示NPCDebugInfo，调用ModNPC[ModNPCInfoString]与GlobalNPC[GlobalNPCInfoString] Action<NPC,List<string>>]]>
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.ShowNPCDebugInfo.ShowAlways">
            <summary>
            设为true使ShowNPCDebugInfo总是显示
            DrawTimeLeft=1;
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.ShowProjDebugInfo">
            <summary><![CDATA[
            用于显示ProjDebugInfo，调用ModProjectile[ModProjInfoString]与GlobalProjectile[GlobalProjInfoString]]]>
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.ShowProjDebugInfo.ShowAlways">
            <summary>
            设为true使ShowNPCDebugInfo总是显示
            DrawTimeLeft=1;
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.UI.CustomDraw">
            <summary>
            操作被添加的UI
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.UI.CustomDraw.IDrawer">
            <summary>
            用于可添加的绘画的接口
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.CustomDraw.IDrawer.DrawFunc(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            绘画函数
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.CustomDraw.IDrawer.AI">
            <summary>
            操作
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.CustomDraw.IDrawer.Quit">
            <summary>
            是否结束
            </summary>
            <returns>true结束</returns>
        </member>
        <member name="T:XxDefinitions.XDebugger.UI.CustomDraw.Drawer`1">
            <summary>
            用于可添加的绘画的基类
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.CustomDraw.Drawer`1.DrawFunc(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            绘画函数
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.CustomDraw.Drawer`1.AI">
            <summary>
            操作
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.CustomDraw.Drawer`1.Quit">
            <summary>
            是否结束
            </summary>
            <returns>true结束</returns>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.CustomDraw.OnInitialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.CustomDraw.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            
            </summary>
            <param name="spriteBatch"></param>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.CustomDraw.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="T:XxDefinitions.XDebugger.UI.CunsomDrawer">
            <summary>
            用于可添加的绘画的类
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.UI.CunsomDrawer.DDrawF">
            <summary>
            绘画函数委派
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.UI.CunsomDrawer.DAI">
            <summary>
            操作函数委派
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.UI.CunsomDrawer.dDrawF">
            <summary>
            绘画函数
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.UI.CunsomDrawer.dAI">
            <summary>
            操作函数
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.UI.CunsomDrawer.timeleft">
            <summary>
            剩余时间
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.UI.CunsomDrawer.pos">
            <summary>
            位置
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.UI.CunsomDrawer.vel">
            <summary>
            速度
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.UI.CunsomDrawer.customData">
            <summary>
            自定义参数
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.CunsomDrawer.DrawFunc(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            绘画
            </summary>
            <param name="spriteBatch"></param>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.CunsomDrawer.AI">
            <summary>
            操作
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.CunsomDrawer.Quit">
            <summary>
            结束
            </summary>
            <returns></returns>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.CunsomDrawer.#ctor(XxDefinitions.XDebugger.UI.CunsomDrawer.DDrawF,System.Int32,System.Object,Microsoft.Xna.Framework.Vector2,XxDefinitions.XDebugger.UI.CunsomDrawer.DAI,Microsoft.Xna.Framework.Vector2)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.UI.DrawString">
            <summary>
            添加绘画字符串
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.UI.DrawString.ShownString">
            <summary>
            绘画出的字符串
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.UI.DrawString.Pos">
            <summary>
            位置
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.UI.DrawString.timeleft">
            <summary>
            剩余时间
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.DrawString.AI">
            <summary>
            操作
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.DrawString.#ctor(System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.DrawString.#ctor(System.String,Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.DrawString.DrawFunc(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            画
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.UI.DrawString.Quit">
            <summary>
            退出
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.Utils">
            <summary>
            方法
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.Utils.DrawUtils">
            <summary>
            用于绘画的方法
            </summary>
        </member>
        <member name="P:XxDefinitions.XDebugger.Utils.DrawUtils.Line">
            <summary>
            线
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.Utils.AddDraw">
            <summary>
            可用随时调用的添加绘画的方法
            比如<code>
            public override void AI(){
            	AddDraw.AddDrawVector(npc.velocity,npc.Center);
            }
            </code>
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.XDebugger">
            <summary>
            用于调试
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.XDebugger.DefXDebugger">
            <summary>
            用于默认操作的Xdebugger
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.XDebugger.AnnouncedDebuggers">
            <summary>
            所有公开XDebugger的
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.XDebugger.CloseDebugMode">
            <summary>
            关闭调试
            </summary>
        </member>
        <member name="P:XxDefinitions.XDebugger.XDebugger.DebugMode">
            <summary>
            开关调试，控制所有XDebugger
            只要有DebugMode=true 都会开启
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.XDebugger.Call(System.Object[])">
            <summary>
            弱引用操作
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.XDebugger.Using">
            <summary>
            是否使用，如果为false，所有与之相关的操作都将无效
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.XDebugger.FullName">
            <summary>
            名字
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.XDebugger.#ctor(Terraria.ModLoader.Mod,System.String,System.Boolean,System.Boolean)">
            <summary>
            为mod生成XDebugger
            其全名为 mod.Name+"."+ Name
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.XDebugger.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            生成XDebugger
            不建议使用
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.XDebugger.GetXDebugger(Terraria.ModLoader.Mod,System.String)">
            <summary>
            获取对应XDebugger
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.XDebugger.GetXDebugger(System.String)">
            <summary>
            获取对应XDebugger
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.XDebugger.op_Implicit(XxDefinitions.XDebugger.XDebugger)~System.Boolean">
            <summary>
            使得可以直接用if(xDebugger){...}
            </summary>
            <param name="xDebugger"></param>
        </member>
        <member name="M:XxDefinitions.XDebugger.XDebugger.GetTryGetXDebugger(System.String)">
            <summary>
            获取TryGetXDebugger
            TryGetXDebugger有特殊的管理方法
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.TryGetXDebugger">
            <summary>
            尝试获取XDebugger，在生成XDebugger时自动获取
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.TryGetXDebugger.FullName">
            <summary>
            XDebugger的全名
            </summary>
        </member>
        <member name="P:XxDefinitions.XDebugger.TryGetXDebugger.xDebugger">
            <summary>
            目标XDebugger
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.TryGetXDebugger.GetTryGetXDebugger(System.String)">
            <summary>
            获取尝试获取XDebugger名为FullName的TryGetXDebugger
            </summary>
        </member>
        <member name="P:XxDefinitions.XDebugger.TryGetXDebugger.XDebuggerMode">
            <summary>
            如果xDebugger不存在，返回0；如果xDebugger禁用，返回1；否则返回2；
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.TryGetXDebugger.op_Implicit(XxDefinitions.XDebugger.TryGetXDebugger)~System.Boolean">
            <summary>
            if(tryGetXDebugger)
            </summary>
        </member>
        <member name="T:XxDefinitions.XDebugger.XDebuggerRequires">
            <summary>
            根据需要获取属性
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.XDebuggerRequires.PropertyName">
            <summary>
            属性的名称
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.XDebuggerRequires.XDebuggerFullName">
            <summary>
            使用的XDebugger的全名
            </summary>
        </member>
        <member name="F:XxDefinitions.XDebugger.XDebuggerRequires.tryGetXDebugger">
            <summary>
            尝试获取XDebugger
            </summary>
        </member>
        <member name="M:XxDefinitions.XDebugger.XDebuggerRequires.#ctor(System.String,System.String)">
            <summary>
            使用反射获取属性值
            </summary>
            <param name="XDebuggerFullName">使用的XDebugger的全名</param>
            <param name="PropertyName">属性的名称</param>
        </member>
    </members>
</doc>
